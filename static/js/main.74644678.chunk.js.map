{"version":3,"sources":["providers/liveContext.tsx","components/LiveUnit/index.tsx","providers/plantData.ts","components/LiveUnitRow/index.tsx","components/Live/index.tsx","providers/context.tsx","components/PlantEvent/index.tsx","components/PlantCycle/index.tsx","components/ModalContent/SoakInformation.tsx","components/ModalContent/GeneralInformation.tsx","components/ModalContent/GermInformation.tsx","components/ModalContent/GrowInformation.tsx","components/ModalContent/DayInformation.tsx","components/ModalContent/index.tsx","components/Legend/index.tsx","logo-green.svg","components/Timeline/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialState","trayContent","plantingDate","modalSelection","id","date","harvestDate","modalState","capacity","total","Context","React","createContext","type","payload","ACTIONS","PLANTING","SET_DATE","CLEAR_TRAY","SELECTED_MODAL_EVENT","SET_MODAL_STATE","reducer","state","console","log","newItem","amount","number","updated","map","item","final","some","element","calculatedTotal","LiveContextProvider","props","useReducer","dispatch","Provider","value","children","useLiveContext","useContext","LiveUnit","plantName","className","plantData","clean","time","solution","planting","seedWeight","unit","cycleData","soak","length","temp","germination","grow","lightCycle","waterCycle","ph","options","label","nameMap","peas","leak","redCabbage","brocolli","pakchoi","radish","borax","LiveUnitRow","calculateDates","dateString","days","moment","Date","add","format","growDays","htmlFor","onChange","e","parseInt","target","updateSelection","Live","useState","selected","setSelected","setDate","onDateChange","selection","sel","onPlantChangeHandler","isMulti","index","onClick","Array","fill","UPDATE_SELECTION","ALL_SELECTION","CLEAR_SELECTION","AppContextProvider","useAppContext","PlantEvent","isFirstEvent","eventId","calculatedDate","isFirst","eventType","getMoreOnEvent","PlantCycle","totalGrowDays","cycles","name","subtract","loopItem","push","SoakInformation","plantObject","GeneralInformation","GermInformation","GrowInformation","DayInformation","ModalContent","variants","selectedPlant","filter","hasSoak","hasGermination","Legend","_extends","Object","assign","i","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref3","d","SvgLogoGreen","_ref","svgRef","title","titleId","xmlns","viewBox","ref","ForwardRef","Timeline","calculateIsWeekend","dm","onDateChangeHandler","ariaHideApp","isOpen","contentLabel","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74644678.chunk.js","sourcesContent":["import React, { useContext, useReducer } from \"react\";\nimport moment from \"moment\";\nimport { plantData } from \"./plantData\";\n\nexport type LiveDate = {\n  plantingDate: string;\n  harvestDate: string;\n};\n\nexport type ModalSelection = {\n  id: string;\n  date: LiveDate;\n};\n\nexport type LiveUnit = {\n  id: string;\n  date: LiveDate;\n  amount: number;\n};\n\nexport type State = {\n  trayContent: LiveUnit[];\n  plantingDate: string;\n  modalSelection: ModalSelection;\n  modalState: boolean;\n  capacity: number;\n  total: number;\n};\n\nconst initialState: State = {\n  trayContent: [],\n  plantingDate: \"2021-01-01\",\n  modalSelection: {\n    id: \"\",\n    date: {\n      plantingDate: \"\",\n      harvestDate: \"\",\n    },\n  },\n  modalState: false,\n  capacity: 60,\n  total: 0,\n};\n\nconst Context = React.createContext([\n  initialState,\n  ({ type, payload }: any) => {\n    // do nohting.\n  },\n]);\n\nconst ACTIONS = {\n  PLANTING: \"PLANTING\",\n  SET_DATE: \"SET_DATE\",\n  CLEAR_TRAY: \"CLEAR_TRAY\",\n\n  SELECTED_MODAL_EVENT: \"SELECTED_MODAL_EVENT\",\n  SET_MODAL_STATE: \"SET_MODAL_STATE\",\n};\n\nexport const reducer = (state: State, { type, payload }: any) => {\n  switch (type) {\n    case \"PLANTING\":\n      console.log(\"incoming payload: \", payload);\n      console.log(\"trayContent start: \", state.trayContent);\n\n      const newItem: LiveUnit = {\n        id: payload.id,\n        date: payload.date,\n        amount: payload.number,\n      };\n\n      const updated: LiveUnit[] = state.trayContent.map((item) => {\n        if (item.id === payload.id) {\n          return newItem;\n        } else return item;\n      });\n\n      const isAlready = (element: LiveUnit) => element.id === payload.id;\n\n      const final = {\n        ...state,\n        trayContent: state.trayContent.some(isAlready)\n          ? updated\n          : [...state.trayContent, newItem],\n      };\n\n      let calculatedTotal: number = 0;\n      final.trayContent.map(\n        (item) => (calculatedTotal = calculatedTotal + item.amount)\n      );\n      return { ...final, total: calculatedTotal };\n\n    case \"SET_DATE\":\n      return { ...state, plantingDate: payload };\n\n    case \"CLEAR_TRAY\":\n      return { ...state, trayContent: payload };\n\n    case \"SELECTED_MODAL_EVENT\":\n      return { ...state, modalSelection: payload };\n\n    case \"SET_MODAL_STATE\":\n      return { ...state, modalState: payload };\n\n    default:\n      return state;\n  }\n};\n\nexport const LiveContextProvider = (props: any) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <Context.Provider value={[state, dispatch]}>\n      {props.children}\n    </Context.Provider>\n  );\n};\n\nexport const useLiveContext = () => {\n  const [state, dispatch] = useContext(Context);\n\n  return {\n    state,\n    dispatch,\n    ACTIONS,\n  };\n};\n","import React from \"react\";\nimport TodayIcon from \"@material-ui/icons/Today\";\nimport EcoIcon from \"@material-ui/icons/Eco\";\nimport { useLiveContext } from \"../../providers/liveContext\";\n\ninterface LiveProps {\n  plantName: string;\n  id: string;\n}\n\nconst LiveUnit = ({ id, plantName}:LiveProps) => {\n  const { dispatch, ACTIONS }: any = useLiveContext();\n\n  const getMoreOnEvent = (e: any, eventId: string, eventType: string) => {\n    dispatch({\n      type: ACTIONS.SELECTED_MODAL_EVENT,\n      payload: {\n        type: eventType,\n        id: eventId,\n        date: \"calculatedDate\",\n      },\n    });\n    dispatch({\n      type: ACTIONS.SET_MODAL_STATE,\n      payload: true,\n    });\n  };\n\n  return (\n    <div className=\"liveUnit\">\n      <EcoIcon />\n      {/* <span>{plantName}</span> */}\n    </div>\n  );\n};\n\nexport default LiveUnit;\n","import { PlantData, Options } from \"./interface\";\nexport const plants = [\"leak\", \"peas\", \"redCabbage\", \"brocolli\", \"pakchoi\", \"radish\", \"borax\"];\nexport const plantData: PlantData[] = [\n  {\n    id: \"leak\",\n    plantName: \"Pórik\",\n    clean: {\n      time: \"15 min\",\n      solution: \"3%\",\n    },\n    planting: {\n      seedWeight: 3.5,\n      unit: \"kelimok\",\n    },\n    cycleData: {\n      soak: {\n        length: 1,\n        time: \"24 hours\",\n        temp: \"20 C\",\n      },\n      germination: {\n        length: 3,\n        time: \"3 days\",\n        temp: \"20 C\",\n      },\n      grow: {\n        length: 11,\n        lightCycle: \"regular\",\n        waterCycle: \"regular\",\n        ph: 6.6,\n        temp: \"20 C\",\n      },\n    },\n  },\n  {\n    id: \"peas\",\n    plantName: \"Hrášok\",\n    clean: {\n      time: \"15min\",\n      solution: \"3%\",\n    },\n    planting: {\n      seedWeight: 7.5,\n      unit: \"kelimok\",\n    },\n    cycleData: {\n      soak: {\n        length: 1,\n        time: \"24 hours\",\n        temp: \"22 C\",\n      },\n      germination: {\n        length: 2,\n        time: \"2 days\",\n        temp: \"22 C\",\n      },\n      grow: {\n        length: 12,\n        lightCycle: \"regular\",\n        waterCycle: \"regular\",\n        ph: 6.6,\n        temp: \"22 C\",\n      },\n    },\n  },\n  {\n    id: \"redCabbage\",\n    plantName: \"Červená kapusta\",\n    clean: {\n      time: \"15 min\",\n      solution: \"3%\",\n    },\n    planting: {\n      seedWeight: 3,\n      unit: \"kelimok\",\n    },\n    cycleData: {\n      soak: {\n        length: 0,\n        time: \"none\",\n        temp: \"20 C\",\n      },\n      germination: {\n        length: 3,\n        time: \"3 days\",\n        temp: \"20 C\",\n      },\n      grow: {\n        length: 7,\n        lightCycle: \"regular\",\n        waterCycle: \"regular\",\n        ph: 6.6,\n        temp: \"20 C\",\n      },\n    },\n  },\n  {\n    id: \"brocolli\",\n    plantName: \"Brokolica\",\n    clean: {\n      time: \"15 min\",\n      solution: \"3%\",\n    },\n    planting: {\n      seedWeight: 2.3,\n      unit: \"kelimok\",\n    },\n    cycleData: {\n      soak: {\n        length: 0,\n        time: \"none\",\n        temp: \"20 C\",\n      },\n      germination: {\n        length: 2,\n        time: \"2 days\",\n        temp: \"20 C\",\n      },\n      grow: {\n        length: 7,\n        lightCycle: \"regular\",\n        waterCycle: \"regular\",\n        ph: 6.6,\n        temp: \"20 C\",\n      },\n    },\n  },\n  {\n    id: \"pakchoi\",\n    plantName: \"Pak Choi\",\n    clean: {\n      time: \"15 min\",\n      solution: \"3%\",\n    },\n    planting: {\n      seedWeight: 3,\n      unit: \"kelimok\",\n    },\n    cycleData: {\n      soak: {\n        length: 0,\n        time: \"none\",\n        temp: \"20 C\",\n      },\n      germination: {\n        length: 3,\n        time: \"3 days\",\n        temp: \"20 C\",\n      },\n      grow: {\n        length: 7,\n        lightCycle: \"regular\",\n        waterCycle: \"regular\",\n        ph: 6.6,\n        temp: \"20 C\",\n      },\n    },\n  },\n  {\n    id: \"radish\",\n    plantName: \"Reďkovka - Rambo\",\n    clean: {\n      time: \"15 min\",\n      solution: \"3%\",\n    },\n    planting: {\n      seedWeight: 4,\n      unit: \"kelimok\",\n    },\n    cycleData: {\n      soak: {\n        length: 0,\n        time: \"none\",\n        temp: \"20 C\",\n      },\n      germination: {\n        length: 3,\n        time: \"3 days\",\n        temp: \"20 C\",\n      },\n      grow: {\n        length: 6,\n        lightCycle: \"regular\",\n        waterCycle: \"regular\",\n        ph: 6.6,\n        temp: \"20 C\",\n      },\n    },\n  },\n  {\n    id: \"borax\",\n    plantName: \"Borák\",\n    clean: {\n      time: \"15 min\",\n      solution: \"3%\",\n    },\n    planting: {\n      seedWeight: 3.5,\n      unit: \"kelimok\",\n    },\n    cycleData: {\n      soak: {\n        length: 2,\n        time: \"2 days\",\n        temp: \"20 C\",\n      },\n      germination: {\n        length: 4,\n        time: \"4 days\",\n        temp: \"20 C\",\n      },\n      grow: {\n        length: 9,\n        lightCycle: \"regular\",\n        waterCycle: \"regular\",\n        ph: 6.6,\n        temp: \"20 C\",\n      },\n    },\n  },\n];\n\nexport const options: Options[] = [\n  {\n    label: \"Hrášok\",\n    value: \"peas\",\n  },\n  {\n    label: \"Pórik\",\n    value: \"leak\",\n  },\n  {\n    label: \"Červená kapusta\",\n    value: \"redCabbage\",\n  },\n  {\n    label: \"Brokolica\",\n    value: \"brocolli\",\n  },\n  {\n    label: \"Pak Choi\",\n    value: \"pakchoi\",\n  },\n  {\n    label: \"Reďkovka\",\n    value: \"radish\",\n  },\n  {\n    label: \"Borák\",\n    value: \"borax\",\n  },\n];\n\nexport type NameMap = {\n  [name: string]: string\n};\n\nexport const nameMap: NameMap = {\n  peas: \"Hrášok\",\n  leak: \"Pórik\",\n  redCabbage: \"Červená kapusta\",\n  brocolli: \"Brokolica\",\n  pakchoi: \"Pak Choi\",\n  radish:\"Reďkovka\",\n  borax: \"Borák\",\n}","import React, { useEffect, useState } from \"react\";\nimport { plantData, nameMap } from \"../../providers/plantData\";\nimport { PlantData } from \"../../providers/interface\";\n// import DayIcon from \"@material-ui/icons/Today\";\nimport moment from \"moment\";\nimport { useLiveContext, LiveUnit } from \"../../providers/liveContext\";\n\ninterface LiveUnitRowProps {\n  date: string;\n  id: string;\n}\n\nconst LiveUnitRow = ({ id, date }: LiveUnitRowProps) => {\n  const { dispatch, ACTIONS }: any = useLiveContext();\n\n  const calculateDates = (dateString: string, days: number) => {\n    let d = moment(new Date(dateString));\n    let dm = d.add(days, \"days\");\n    return dm.format(\"dd DD. MM.\");\n  };\n\n  let growDays: number = 0;\n\n  plantData.map((item) => {\n    if (item.id === id) {\n      growDays = item.cycleData.grow.length;\n    }\n  });\n\n  const updateSelection = (e: any) => {\n    dispatch({\n      type: ACTIONS.PLANTING,\n      payload: {\n        id: id,\n        number: parseInt(e.target.value, 10),\n        date: {\n          plantingDate: calculateDates(date, 0), // just to format\n          harvestDate: calculateDates(date, growDays),\n        },\n      },\n    });\n  };\n\n  return (\n    <div className=\"plantRow\">\n      <label htmlFor={id}>{nameMap[id]}</label>\n      <input id={id} onChange={(e) => updateSelection(e)} type=\"number\" />\n    </div>\n  );\n};\n\nexport default LiveUnitRow;\n","import React, { useState } from \"react\";\nimport Select from \"react-select\";\nimport EcoIcon from \"@material-ui/icons/Eco\";\nimport LiveUnit from \"../LiveUnit\";\nimport LiveUnitRow from \"../LiveUnitRow\";\nimport { options, nameMap } from \"../../providers/plantData\";\nimport {  PlantData } from \"../../providers/interface\";\nimport { useLiveContext } from \"../../providers/liveContext\";\n\nconst Live = () => {\n  const [selected, setSelected] = useState<string[]>([]);\n  const [date, setDate] = useState(\"\");\n  const { state, dispatch, ACTIONS }: any = useLiveContext();\n\n  const submitSelection = () => {\n    console.log(\"submit\");\n  };\n\n  const onDateChange = (e: any) => {\n    setDate(e.target.value);\n\n    dispatch({\n      type: ACTIONS.SET_DATE,\n      payload: e.target.value,\n    });\n  };\n\n  const onPlantChangeHandler = (selection: any) => {\n    let sel = selection?.map((item: any) => item.value);\n    setSelected(sel);\n  };\n\n  return (\n    <div className=\"liveContainer\">\n      <div className=\"liveFormWrapper\">\n        <h3>Plant Selection</h3>\n        <div className=\"liveControl\">\n          <div className=\"liveControlItem\">\n            <label>\n              Planting Date:\n              <input\n                onChange={(e) => {\n                  onDateChange(e);\n                }}\n                type=\"date\"\n                value={date}\n              />\n            </label>\n          </div>\n          <div className=\"liveControlItem\">\n            <Select\n              onChange={(selection: any) => onPlantChangeHandler(selection)}\n              isMulti\n              options={options}\n            />\n          </div>\n        </div>\n        {selected.map((item, index) => (\n          <LiveUnitRow key={index} id={item} date={date} />\n        ))}\n        <div className=\"submitSelection\">\n          <button onClick={submitSelection}>\n            <EcoIcon /> Plant selected\n          </button>\n        </div>\n      </div>\n      <div className=\"liveWrapper\">\n      {new Array(state.total).fill(1).map((unit, index) => (\n          <LiveUnit key={index} id=\"peas\" plantName=\"Hrasak\"/>\n        ))}\n        {/* {state.trayContent.map((unit: PlantData, index: number) => (\n          item.\n          <LiveUnit key={index} id={unit.id} plantName={nameMap[unit.id]} />\n        ))} */}\n      </div>\n    </div>\n  );\n};\n\nexport default Live;\n","import React, { useContext, useReducer } from \"react\";\n\nexport type ModalSelection = {\n  id: string;\n  type: string;\n  date: string;\n};\n\nexport type State = {\n  selection: string[];\n  harvestDate: string;\n  modalSelection: ModalSelection;\n  modalState: boolean;\n};\n\nconst initialState: State = {\n  selection: [],\n  harvestDate: \"2021-01-01\",\n  modalSelection: {\n    id: \"\",\n    type: \"\",\n    date: \"\",\n  },\n  modalState: false,\n};\n\nconst Context = React.createContext([\n  initialState,\n  ({ type, payload }: any) => {\n    // do nohting.\n  },\n]);\n\nconst ACTIONS = {\n  SET_DATE: \"SET_DATE\",\n  // CLEAR_DATE: \"CLEAR_DATE\",\n  \n  UPDATE_SELECTION: \"UPDATE_SELECTION\",\n  ALL_SELECTION: \"ALL_SELECTION\",\n  CLEAR_SELECTION: \"CLEAR_SELECTION\",\n\n  SELECTED_MODAL_EVENT: \"SELECTED_MODAL_EVENT\",\n  SET_MODAL_STATE: \"SET_MODAL_STATE\",\n};\n\nexport const reducer = (state: State, { type, payload }: any) => {\n  switch (type) {\n    case \"UPDATE_SELECTION\":\n      return { ...state, selection: payload };\n\n    case \"CLEAR_SELECTION\":\n      return { ...state, selection: payload };\n\n    case \"ALL_SELECTION\":\n      return { ...state, selection: payload };\n\n    // case \"CLEAR_DATE\":\n    //   return { ...state, harvestDate: \"payload\" };\n\n    case \"SET_DATE\":\n      return { ...state, harvestDate: payload };\n\n    case \"SELECTED_MODAL_EVENT\":\n      return { ...state, modalSelection: payload };\n\n    case \"SET_MODAL_STATE\":\n      return { ...state, modalState: payload };\n\n    default:\n      return state;\n  }\n};\n\nexport const AppContextProvider = (props: any) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <Context.Provider value={[state, dispatch]}>\n      {props.children}\n    </Context.Provider>\n  );\n};\n\nexport const useAppContext = () => {\n  const [state, dispatch] = useContext(Context);\n\n  return {\n    state,\n    dispatch,\n    ACTIONS,\n  };\n};\n","import React from \"react\";\nimport TodayIcon from \"@material-ui/icons/Today\";\nimport MoreIcon from \"@material-ui/icons/MoreHoriz\";\nimport { useAppContext } from \"../../providers/context\";\n\ninterface PlantEventProps {\n  length: number;\n  plantName: string;\n  calculatedDate: string;\n  id: string;\n  type: \"soak\" | \"germination\" | \"grow\";\n  isFirst: boolean;\n}\n\nconst PlantEvent = ({\n  plantName,\n  length,\n  type,\n  calculatedDate,\n  id,\n  isFirst,\n}: PlantEventProps) => {\n  const { dispatch, ACTIONS }: any = useAppContext();\n  \n  const getMoreOnEvent = (e: any, eventId: string, eventType: string) => {\n    dispatch({\n      type: ACTIONS.SELECTED_MODAL_EVENT,\n      payload: {\n        type: eventType,\n        id: eventId,\n        date: calculatedDate\n      }\n    })\n    dispatch({\n      type: ACTIONS.SET_MODAL_STATE,\n      payload: true\n    })\n  };\n\n  const renderIcon = (isFirstEvent: boolean, eventId: string, eventType: string) => {\n    if (isFirstEvent) {\n      return <TodayIcon onClick={(e) => getMoreOnEvent(e, eventId, type)} className=\"iconEvent\"  />;\n    } else return <MoreIcon />;\n  };\n\n  return (\n    <div className=\"plantEventContainer\">\n      <div className=\"plantEvent\">\n        <span className={type} >\n          {renderIcon(isFirst, id, type)}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default PlantEvent;\n","import React from \"react\";\nimport PlantEvent from \"../PlantEvent\";\nimport { plantData } from \"../../providers/plantData\";\nimport moment from \"moment\";\n\ninterface PlantCycleProps {\n  id: string;\n  harvestDate: string;\n}\n\nconst PlantCycle = ({ id, harvestDate }: PlantCycleProps) => {\n  let totalGrowDays: number = 0;\n  let cycles: any = [];\n  let name: string = \"\";\n\n  const calculateDates = (date: any, days: number) => {\n    let d = moment(new Date(date));\n    let dm = d.subtract(days - 1, \"days\");\n    return dm.format(\"ddd, MMM Do YYYY\");\n  };\n\n  plantData.map((item) => {\n    if (item.id === id) {\n      return (totalGrowDays =\n        item.cycleData.soak.length +\n        item.cycleData.germination.length +\n        item.cycleData.grow.length);\n    }\n    return null;\n  });\n\n  plantData.map((item, index) => {\n    if (item.id === id) {\n      new Array(item.cycleData.soak.length)\n        .fill(0)\n        .map((loopItem, index: number) => {\n          return cycles.push(\n            <PlantEvent\n              key={index}\n              plantName={item.plantName}\n              calculatedDate={\n                index === 0 ? calculateDates(harvestDate, totalGrowDays) : \"\"\n              }\n              id={item.id}\n              type=\"soak\"\n              length={item.cycleData.soak.length}\n              isFirst={index === 0 ? true : false}\n            />\n          );\n        });\n\n      new Array(item.cycleData.germination.length)\n        .fill(0)\n        .map((loopItem, index: number) => {\n          return cycles.push(\n            <PlantEvent\n              key={index + 50}\n              plantName={item.plantName}\n              calculatedDate={\n                index === 0\n                  ? calculateDates(\n                      harvestDate,\n                      totalGrowDays - item.cycleData.soak.length\n                    )\n                  : \"\"\n              }\n              id={item.id}\n              type=\"germination\"\n              length={item.cycleData.germination.length}\n              isFirst={index === 0 ? true : false}\n            />\n          );\n        });\n\n      new Array(item.cycleData.grow.length)\n        .fill(0)\n        .map((loopItem, index: number) => {\n          return cycles.push(\n            <PlantEvent\n              key={index + 100}\n              plantName={item.plantName}\n              calculatedDate={\n                index === 0\n                  ? calculateDates(\n                      harvestDate,\n                      totalGrowDays -\n                        item.cycleData.soak.length -\n                        item.cycleData.germination.length\n                    )\n                  : \"\"\n              }\n              id={item.id}\n              type=\"grow\"\n              length={item.cycleData.grow.length}\n              isFirst={index === 0 ? true : false}\n            />\n          );\n        });\n      return null;\n    } else return null;\n  });\n\n  plantData.map((item) => {\n    if (item.id === id) {\n      name = item.plantName;\n    }\n    return null\n  });\n\n  return (\n    <div className=\"plantCycle\">\n      <h3>{name}</h3>\n      {cycles}\n    </div>\n  );\n};\n\nexport default PlantCycle;\n","import React from \"react\";\nimport ClockIcon from \"@material-ui/icons/Timer\";\nimport { ContentProps } from \"../../providers/interface\";\n\nconst SoakInformation = ({ plantObject }: ContentProps) => {\n  return (\n    <div className=\"soakInformation modalBox\">\n      <h3>Soak</h3>\n      <p><ClockIcon /> Time: {plantObject.cycleData.soak.time}</p>\n      <hr/>\n    </div>\n  );\n};\n\nexport default SoakInformation;\n","import React from \"react\";\nimport { ContentProps } from \"../../providers/interface\";\nimport SolutionIcon from \"@material-ui/icons/FormatColorFill\";\nimport ClockIcon from \"@material-ui/icons/Timer\";\nimport WeightIcon from \"@material-ui/icons/FitnessCenter\";\nimport PerIcon from \"@material-ui/icons/Widgets\";\n\nconst GeneralInformation = ({ plantObject }: ContentProps) => {\n  return (\n    <div className=\"generalInformation  modalBox\">\n        <h3>Cleaning</h3>\n        <p>\n          <ClockIcon /> Time: {plantObject.clean.time}\n        </p>\n        <p>\n          <SolutionIcon /> Solution: {plantObject.clean.solution}\n        </p>\n        <hr />\n        <h3>Planting </h3>\n        <p>\n          <WeightIcon /> Seed weight: {plantObject.planting.seedWeight}g\n        </p>\n        <p>\n          <PerIcon /> Unit: {plantObject.planting.unit}\n        </p>\n        <hr />\n      </div>\n\n  );\n};\n\nexport default GeneralInformation;\n","import React from \"react\";\nimport ClockIcon from \"@material-ui/icons/Timer\";\nimport { ContentProps } from \"../../providers/interface\";\n\nconst GermInformation = ({ plantObject }: ContentProps) => {\n  return (\n    <div className=\"germInformation modalBox\">\n      <h3>Germination</h3>\n      <p><ClockIcon /> Time: {plantObject.cycleData.germination.time}</p>\n      <hr/>\n    </div>\n  );\n};\n\nexport default GermInformation;\n","import React from \"react\";\nimport { ContentProps } from \"../../providers/interface\";\nimport TempIcon from \"@material-ui/icons/WbSunny\";\nimport PHIcon from \"@material-ui/icons/Opacity\";\nimport WaterIcon from \"@material-ui/icons/Waves\";\nimport LightsIcon from \"@material-ui/icons/WbIncandescent\";\nimport ClockIcon from \"@material-ui/icons/Timer\";\n\nconst GrowInformation = ({ plantObject }: ContentProps) => {\n  return (\n    <div className=\"growInformation modalBox\">\n      <h3>Grow</h3>\n      <p><ClockIcon /> Time: {plantObject.cycleData.grow.length} days</p>\n      <p><TempIcon /> Temperature: {plantObject.cycleData.grow.temp}</p>\n      <p><PHIcon /> Water Ph: {plantObject.cycleData.grow.ph}</p>\n      <p><LightsIcon /> LightCycle: {plantObject.cycleData.grow.lightCycle}</p>\n      <p><WaterIcon /> WaterCycle: {plantObject.cycleData.grow.waterCycle}</p>\n    </div>\n  );\n};\n\nexport default GrowInformation;\n","import React from \"react\";\nimport DayIcon from \"@material-ui/icons/Today\";\n\ninterface DayInformationProps { \n  date: string\n}\n\nconst DayInformation = ({ date }: DayInformationProps) => {\n  return (\n    <div className=\"dayInformation modalBox\">\n      <p><DayIcon /> <b>{date}</b></p>\n    </div>\n  );\n};\n\nexport default DayInformation;\n","import React from \"react\";\nimport { ModalSelection } from \"../../providers/context\";\nimport SoakInformation from \"./SoakInformation\";\nimport GeneralInformation from \"./GeneralInformation\";\nimport GermInformation from \"./GermInformation\";\nimport GrowInformation from \"./GrowInformation\";\nimport DayInformation from \"./DayInformation\";\nimport { plantData } from \"../../providers/plantData\";\n\ninterface ModalContentProps {\n  variants: ModalSelection;\n}\n\nconst ModalContent = ({ variants }: ModalContentProps) => {\n  let selected = plantData.filter((item) => item.id === variants.id);\n  let selectedPlant = selected[0];\n  let hasSoak: boolean = selectedPlant.cycleData.soak.length > 0;\n  let hasGermination: boolean = selectedPlant.cycleData.germination.length > 0;\n\n  if (variants.type === \"soak\") {\n    return (\n      <>\n        <DayInformation date={variants.date} />\n        <GeneralInformation plantObject={selectedPlant} />\n        <SoakInformation plantObject={selectedPlant} />\n      </>\n    );\n  }\n\n  if (variants.type === \"germination\") {\n    if (hasSoak) {\n      return (\n        <>\n          <DayInformation date={variants.date} />\n          <GermInformation plantObject={selectedPlant} />\n        </>\n      );\n    } else\n      return (\n        <>\n          <DayInformation date={variants.date} />\n          <GeneralInformation plantObject={selectedPlant} />\n          <GermInformation plantObject={selectedPlant} />\n        </>\n      );\n  } else {\n    if (hasSoak && !hasGermination) {\n      return (\n        <>\n          <DayInformation date={variants.date} />\n          <GermInformation plantObject={selectedPlant} />\n          <GrowInformation plantObject={selectedPlant} />\n        </>\n      );\n    }\n    if (!hasSoak && hasGermination) {\n      return (\n        <>\n          <DayInformation date={variants.date} />\n          <GrowInformation plantObject={selectedPlant} />\n        </>\n      );\n    }\n    if (!hasSoak && !hasGermination) {\n      return (\n        <>\n          <DayInformation date={variants.date} />\n          <GeneralInformation plantObject={selectedPlant} />\n          <SoakInformation plantObject={selectedPlant} />\n          <GermInformation plantObject={selectedPlant} />\n          <GrowInformation plantObject={selectedPlant} />\n        </>\n      );\n    } else {\n      return (\n        <>\n          <GrowInformation plantObject={selectedPlant} />\n        </>\n      );\n    }\n  }\n};\n\nexport default ModalContent;\n","import React from \"react\";\nimport DayIcon from \"@material-ui/icons/Today\";\nimport MoreIcon from \"@material-ui/icons/MoreHoriz\";\n\nconst Legend = () => {\n  return (\n    <div className=\"legend\">\n      <div className=\"clickable\">\n        <div className=\"plantEvent\">\n          <span className=\"soak\">\n            <DayIcon />\n          </span>\n          - Soak Event\n        </div>\n        <div className=\"plantEvent\">\n          <span className=\"germination\">\n            <DayIcon />\n          </span>\n          - Germination Event\n        </div>\n        <div className=\"plantEvent\">\n          <span className=\"grow\">\n            <DayIcon />\n          </span>\n          - Grow Event\n        </div>\n      </div>\n      <div className=\"nonClickable\">\n        <div className=\"plantEvent\">\n          <span className=\"soak\">\n            <MoreIcon />\n          </span>\n        </div>\n        <div className=\"plantEvent\">\n          <span className=\"germination\">\n            <MoreIcon />\n          </span>\n        </div>\n        <div className=\"plantEvent\">\n          <span className=\"grow\">\n            <MoreIcon />\n          </span>\n        </div>\n        - Continuation Events\n      </div>\n    </div>\n  );\n};\n\nexport default Legend;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"style\", null, \".cls-1{fill:#8cc540;}\"));\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M45.8,0A45.83,45.83,0,0,0,3.85,64.22C13.13,84.11,40.52,62.66,47,45.79,30.37,72-3.18,66.07,12.61,49.38,26.87,35.68,52,33.7,57.24,19.1,63.66,33,69.38,71.86,47.49,91.58A45.82,45.82,0,0,0,91.05,52.92a45,45,0,0,0,.56-7.11A45.81,45.81,0,0,0,45.8,0\"\n});\n\nfunction SvgLogoGreen(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    \"data-name\": \"Layer 1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 91.61 91.58\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, _ref3);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgLogoGreen);\nexport default __webpack_public_path__ + \"static/media/logo-green.f5308764.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\nimport Select from \"react-select\";\nimport Modal from \"react-modal\";\nimport moment from \"moment\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport { useAppContext } from \"../../providers/context\";\nimport { plantData, options } from \"../../providers/plantData\";\nimport PlantCycle from \"../PlantCycle\";\nimport ModalContent from \"../ModalContent\";\nimport Legend from \"../Legend\";\nimport { ReactComponent as Logo } from \"../../logo-green.svg\";\nconst Timeline = () => {\n  const { state, dispatch, ACTIONS }: any = useAppContext();\n\n  const closeModal = () => {\n    dispatch({\n      type: ACTIONS.SET_MODAL_STATE,\n      payload: false,\n    });\n  };\n\n  const onPlantChangeHandler = (selection: any) => {\n    dispatch({\n      type: ACTIONS.UPDATE_SELECTION,\n      payload: selection?.map((item: any) => item.value),\n    });\n  };\n\n  const onDateChangeHandler = (e: any) => {\n    dispatch({\n      type: ACTIONS.SET_DATE,\n      payload: e.target.value,\n    });\n  };\n\n  const onClearHandler = () => {\n    dispatch({\n      type: ACTIONS.CLEAR_SELECTION,\n      payload: [],\n    });\n  };\n\n  const onSelectAllHandler = () => {\n    dispatch({\n      type: ACTIONS.ALL_SELECTION,\n      payload: plantData.map((item) => item.id),\n    });\n  };\n\n  const calculateDates = (date: string, days: number) => {\n    let d = moment(new Date(date));\n    let dm = d.subtract(days, \"days\");\n    return dm.format(\"dd DD. MM.\");\n  };\n\n  const calculateIsWeekend = (date: string, days: number) => {\n    let d = moment(new Date(date));\n    let dm = d.subtract(days, \"days\");\n    if (dm.format(\"dd\") === \"Sa\" || dm.format(\"dd\") === \"Su\") {\n      return (days + 1) % 7 === 0 ? \"seven weekend\" : \"weekend\";\n    } else {\n      return (days + 1) % 7 === 0 ? \"seven\" : \"\";\n    }\n  };\n  calculateIsWeekend(state.harvestDate, 1);\n  return (\n    <div className=\"timelineContainer\">\n      <span>\n        <Logo className=\"logo\" />\n        <h1>MicroVeg</h1>\n      </span>\n      <small>Planter Manager</small>\n      <div className=\"controls\">\n        <div className=\"form\">\n          <label htmlFor=\"harverstDate\">Harvest Date:</label>\n          <input\n            id=\"harvestDate\"\n            type=\"date\"\n            value={state.harvestDate}\n            onChange={(e) => {\n              onDateChangeHandler(e);\n            }}\n          />\n          <div className=\"selectWrapper\">\n            <Select\n              onChange={(selection: any) => onPlantChangeHandler(selection)}\n              isMulti\n              options={options}\n            />\n          </div>\n          <button\n            onClick={() => {\n              onClearHandler();\n            }}\n          >\n            Clear\n          </button>\n          <button\n            onClick={() => {\n              onSelectAllHandler();\n            }}\n          >\n            Sellect all\n          </button>\n        </div>\n        <Legend />\n      </div>\n      <div className=\"overflowWrapper\">\n        <div className=\"visualWrapper\">\n          <div className=\"dayNumbers\">\n            {new Array(16).fill(0).map((item: number, index: number) => {\n              return (\n                <div\n                  key={index}\n                  className={calculateIsWeekend(state.harvestDate, index)}\n                >\n                  {/* <div>{20 - index}</div> */}\n                  <div>{calculateDates(state.harvestDate, index)}</div>\n                </div>\n              );\n            })}\n          </div>\n          <div>\n            {state?.selection?.map((item: string, index: number) => {\n              return (\n                <PlantCycle\n                  key={index}\n                  id={item}\n                  harvestDate={state.harvestDate}\n                />\n              );\n            })}\n          </div>\n        </div>\n        <Modal\n          ariaHideApp={false}\n          isOpen={state.modalState}\n          contentLabel=\"Example Modal\"\n        >\n          <ClearIcon className=\"clearIcon\" onClick={closeModal} />\n          <div className=\"modalContent\">\n            <ModalContent variants={state.modalSelection} />\n          </div>\n        </Modal>\n      </div>\n    </div>\n  );\n};\n\nexport default Timeline;\n","import React from \"react\";\nimport Live from \"./components/Live\";\nimport Timeline from \"./components/Timeline\";\nimport { AppContextProvider } from \"./providers/context\";\nimport { LiveContextProvider } from \"./providers/liveContext\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppContextProvider>\n        <Timeline />\n      </AppContextProvider>\n      <LiveContextProvider>\n        <Live />\n      </LiveContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}