{"version":3,"sources":["providers/liveContext.tsx","components/LiveUnit/index.tsx","providers/plantData.ts","components/LiveUnitRow/index.tsx","components/Live/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initialState","trayContent","plantingDate","modalSelection","id","date","harvestDate","modalState","capacity","total","Context","React","createContext","type","payload","ACTIONS","PLANTING","REMOVE_PLANTING_ITEM","CLEAR_PLANTING","SET_DATE","CLEAR_TRAY","SELECTED_MODAL_EVENT","SET_MODAL_STATE","reducer","state","newItem","amount","number","updated","map","item","final","some","element","calculatedTotal","cleared","withoutRemoved","filter","itemToRemove","updatedTotal","tempState","LiveContextProvider","props","useReducer","dispatch","Provider","value","children","useLiveContext","useContext","LiveUnit","plantName","className","plantData","clean","time","solution","planting","seedWeight","unit","cycleData","soak","length","temp","germination","grow","lightCycle","waterCycle","ph","options","label","nameMap","peas","leak","redCabbage","brocolli","pakchoi","radish","borax","LiveUnitRow","calculateDates","dateString","days","moment","Date","add","format","growDays","htmlFor","min","onChange","e","parseInt","target","updateSelection","Live","useState","selected","setSelected","setDate","liveCollection","index","Array","fill","plantUnit","push","isFull","color","onDateChange","selection","action","removedValue","sel","onPlantChangeHandler","isMulti","style","onClick","console","log","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0929134.chunk.js","sourcesContent":["import React, { useContext, useReducer } from \"react\";\nimport moment from \"moment\";\nimport { plantData } from \"./plantData\";\n\nexport type LiveDate = {\n  plantingDate: string;\n  harvestDate: string;\n};\n\nexport type ModalSelection = {\n  id: string;\n  date: LiveDate;\n};\n\nexport type LiveUnitType = {\n  id: string;\n  date: LiveDate;\n  amount: number;\n};\n\nexport type State = {\n  trayContent: LiveUnitType[];\n  plantingDate: string;\n  modalSelection: ModalSelection;\n  modalState: boolean;\n  capacity: number;\n  total: number;\n};\n\nconst initialState: State = {\n  trayContent: [],\n  plantingDate: \"2021-01-01\",\n  modalSelection: {\n    id: \"\",\n    date: {\n      plantingDate: \"\",\n      harvestDate: \"\",\n    },\n  },\n  modalState: false,\n  capacity: 60,\n  total: 0,\n};\n\nconst Context = React.createContext([\n  initialState,\n  ({ type, payload }: any) => {\n    // do nohting.\n  },\n]);\n\nconst ACTIONS = {\n  PLANTING: \"PLANTING\",\n  REMOVE_PLANTING_ITEM: \"REMOVE_PLANTING_ITEM\",\n  CLEAR_PLANTING: \"CLEAR_PLANTING\",\n\n  SET_DATE: \"SET_DATE\",\n  CLEAR_TRAY: \"CLEAR_TRAY\",\n\n  SELECTED_MODAL_EVENT: \"SELECTED_MODAL_EVENT\",\n  SET_MODAL_STATE: \"SET_MODAL_STATE\",\n};\n\nexport const reducer = (state: State, { type, payload }: any) => {\n  switch (type) {\n    case \"PLANTING\":\n      const newItem: LiveUnitType = {\n        id: payload.id,\n        date: payload.date,\n        amount: payload.number,\n      };\n\n      const updated: LiveUnitType[] = state.trayContent.map((item) => {\n        if (item.id === payload.id) {\n          return newItem;\n        } else return item;\n      });\n\n      const isAlready = (element: LiveUnitType) => element.id === payload.id;\n\n      const final = {\n        ...state,\n        trayContent: state.trayContent.some(isAlready)\n          ? updated\n          : [...state.trayContent, newItem],\n      };\n\n      let calculatedTotal: number = 0;\n      final.trayContent.map(\n        (item) => (calculatedTotal = calculatedTotal + item.amount)\n      );\n      return { ...final, total: calculatedTotal };\n\n    case \"CLEAR_PLANTING\":\n      const cleared = {\n        ...state,\n        total: 0,\n      };\n\n      return { ...cleared, trayContent: payload };\n\n    case \"REMOVE_PLANTING_ITEM\":\n      let withoutRemoved: any = state.trayContent.filter(\n        (item) => item.id !== payload\n      );\n      let itemToRemove: any = state.trayContent.filter(item => item.id === payload)\n\n      let updatedTotal = state.total - itemToRemove[0].amount;\n      let tempState = { ...state, total: updatedTotal };\n      return { ...tempState , trayContent: withoutRemoved };\n\n    case \"SET_DATE\":\n      return { ...state, plantingDate: payload };\n\n    case \"CLEAR_TRAY\":\n      return { ...state, trayContent: payload };\n\n    case \"SELECTED_MODAL_EVENT\":\n      return { ...state, modalSelection: payload };\n\n    case \"SET_MODAL_STATE\":\n      return { ...state, modalState: payload };\n\n    default:\n      return state;\n  }\n};\n\nexport const LiveContextProvider = (props: any) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <Context.Provider value={[state, dispatch]}>\n      {props.children}\n    </Context.Provider>\n  );\n};\n\nexport const useLiveContext = () => {\n  const [state, dispatch] = useContext(Context);\n\n  return {\n    state,\n    dispatch,\n    ACTIONS,\n  };\n};\n","import React from \"react\";\nimport TodayIcon from \"@material-ui/icons/Today\";\nimport EcoIcon from \"@material-ui/icons/Eco\";\nimport { useLiveContext } from \"../../providers/liveContext\";\nimport moment from 'moment';\n\ninterface LiveProps {\n  plantName: string;\n  id: string;\n  date: string;\n}\n\nconst LiveUnit = ({ id, plantName, date }: LiveProps) => {\n  const { dispatch, ACTIONS }: any = useLiveContext();\n\n  const getMoreOnEvent = (e: any, eventId: string, eventType: string) => {\n    dispatch({\n      type: ACTIONS.SELECTED_MODAL_EVENT,\n      payload: {\n        type: eventType,\n        id: eventId,\n        date: \"calculatedDate\",\n      },\n    });\n    dispatch({\n      type: ACTIONS.SET_MODAL_STATE,\n      payload: true,\n    });\n  };\n\n  return (\n    <div className=\"liveUnit\">\n      <EcoIcon />\n      <span>{plantName}</span>\n    </div>\n  );\n};\n\nexport default LiveUnit;\n","import { PlantData, Options } from \"./interface\";\nexport const plants = [\"leak\", \"peas\", \"redCabbage\", \"brocolli\", \"pakchoi\", \"radish\", \"borax\"];\nexport const plantData: PlantData[] = [\n  {\n    id: \"leak\",\n    plantName: \"Pórik\",\n    clean: {\n      time: \"15 min\",\n      solution: \"3%\",\n    },\n    planting: {\n      seedWeight: 3.5,\n      unit: \"kelimok\",\n    },\n    cycleData: {\n      soak: {\n        length: 1,\n        time: \"24 hours\",\n        temp: \"20 C\",\n      },\n      germination: {\n        length: 3,\n        time: \"3 days\",\n        temp: \"20 C\",\n      },\n      grow: {\n        length: 11,\n        lightCycle: \"regular\",\n        waterCycle: \"regular\",\n        ph: 6.6,\n        temp: \"20 C\",\n      },\n    },\n  },\n  {\n    id: \"peas\",\n    plantName: \"Hrášok\",\n    clean: {\n      time: \"15min\",\n      solution: \"3%\",\n    },\n    planting: {\n      seedWeight: 7.5,\n      unit: \"kelimok\",\n    },\n    cycleData: {\n      soak: {\n        length: 1,\n        time: \"24 hours\",\n        temp: \"22 C\",\n      },\n      germination: {\n        length: 2,\n        time: \"2 days\",\n        temp: \"22 C\",\n      },\n      grow: {\n        length: 12,\n        lightCycle: \"regular\",\n        waterCycle: \"regular\",\n        ph: 6.6,\n        temp: \"22 C\",\n      },\n    },\n  },\n  {\n    id: \"redCabbage\",\n    plantName: \"Červená kapusta\",\n    clean: {\n      time: \"15 min\",\n      solution: \"3%\",\n    },\n    planting: {\n      seedWeight: 3,\n      unit: \"kelimok\",\n    },\n    cycleData: {\n      soak: {\n        length: 0,\n        time: \"none\",\n        temp: \"20 C\",\n      },\n      germination: {\n        length: 3,\n        time: \"3 days\",\n        temp: \"20 C\",\n      },\n      grow: {\n        length: 7,\n        lightCycle: \"regular\",\n        waterCycle: \"regular\",\n        ph: 6.6,\n        temp: \"20 C\",\n      },\n    },\n  },\n  {\n    id: \"brocolli\",\n    plantName: \"Brokolica\",\n    clean: {\n      time: \"15 min\",\n      solution: \"3%\",\n    },\n    planting: {\n      seedWeight: 2.3,\n      unit: \"kelimok\",\n    },\n    cycleData: {\n      soak: {\n        length: 0,\n        time: \"none\",\n        temp: \"20 C\",\n      },\n      germination: {\n        length: 2,\n        time: \"2 days\",\n        temp: \"20 C\",\n      },\n      grow: {\n        length: 7,\n        lightCycle: \"regular\",\n        waterCycle: \"regular\",\n        ph: 6.6,\n        temp: \"20 C\",\n      },\n    },\n  },\n  {\n    id: \"pakchoi\",\n    plantName: \"Pak Choi\",\n    clean: {\n      time: \"15 min\",\n      solution: \"3%\",\n    },\n    planting: {\n      seedWeight: 3,\n      unit: \"kelimok\",\n    },\n    cycleData: {\n      soak: {\n        length: 0,\n        time: \"none\",\n        temp: \"20 C\",\n      },\n      germination: {\n        length: 3,\n        time: \"3 days\",\n        temp: \"20 C\",\n      },\n      grow: {\n        length: 7,\n        lightCycle: \"regular\",\n        waterCycle: \"regular\",\n        ph: 6.6,\n        temp: \"20 C\",\n      },\n    },\n  },\n  {\n    id: \"radish\",\n    plantName: \"Reďkovka - Rambo\",\n    clean: {\n      time: \"15 min\",\n      solution: \"3%\",\n    },\n    planting: {\n      seedWeight: 4,\n      unit: \"kelimok\",\n    },\n    cycleData: {\n      soak: {\n        length: 0,\n        time: \"none\",\n        temp: \"20 C\",\n      },\n      germination: {\n        length: 3,\n        time: \"3 days\",\n        temp: \"20 C\",\n      },\n      grow: {\n        length: 6,\n        lightCycle: \"regular\",\n        waterCycle: \"regular\",\n        ph: 6.6,\n        temp: \"20 C\",\n      },\n    },\n  },\n  {\n    id: \"borax\",\n    plantName: \"Borák\",\n    clean: {\n      time: \"15 min\",\n      solution: \"3%\",\n    },\n    planting: {\n      seedWeight: 3.5,\n      unit: \"kelimok\",\n    },\n    cycleData: {\n      soak: {\n        length: 2,\n        time: \"2 days\",\n        temp: \"20 C\",\n      },\n      germination: {\n        length: 4,\n        time: \"4 days\",\n        temp: \"20 C\",\n      },\n      grow: {\n        length: 9,\n        lightCycle: \"regular\",\n        waterCycle: \"regular\",\n        ph: 6.6,\n        temp: \"20 C\",\n      },\n    },\n  },\n];\n\nexport const options: Options[] = [\n  {\n    label: \"Hrášok\",\n    value: \"peas\",\n  },\n  {\n    label: \"Pórik\",\n    value: \"leak\",\n  },\n  {\n    label: \"Červená kapusta\",\n    value: \"redCabbage\",\n  },\n  {\n    label: \"Brokolica\",\n    value: \"brocolli\",\n  },\n  {\n    label: \"Pak Choi\",\n    value: \"pakchoi\",\n  },\n  {\n    label: \"Reďkovka\",\n    value: \"radish\",\n  },\n  {\n    label: \"Borák\",\n    value: \"borax\",\n  },\n];\n\nexport type NameMap = {\n  [name: string]: string\n};\n\nexport const nameMap: NameMap = {\n  peas: \"Hrášok\",\n  leak: \"Pórik\",\n  redCabbage: \"Červená kapusta\",\n  brocolli: \"Brokolica\",\n  pakchoi: \"Pak Choi\",\n  radish:\"Reďkovka\",\n  borax: \"Borák\",\n}","import React, { useEffect, useState } from \"react\";\nimport { plantData, nameMap } from \"../../providers/plantData\";\nimport { PlantData } from \"../../providers/interface\";\n// import DayIcon from \"@material-ui/icons/Today\";\nimport moment from \"moment\";\nimport { useLiveContext, LiveUnitType } from \"../../providers/liveContext\";\n\ninterface LiveUnitRowProps {\n  date: string;\n  id: string;\n}\n\nconst LiveUnitRow = ({ id, date }: LiveUnitRowProps) => {\n  const { dispatch, ACTIONS }: any = useLiveContext();\n\n  const calculateDates = (dateString: string, days: number) => {\n    let d = moment(new Date(dateString));\n    let dm = d.add(days, \"days\");\n    return dm.format(\"dd DD. MM.\");\n  };\n\n  let growDays: number = 0;\n\n  plantData.map((item) => {\n    if (item.id === id) {\n      growDays = item.cycleData.grow.length;\n    }\n  });\n\n  const updateSelection = (e: any) => {\n    dispatch({\n      type: ACTIONS.PLANTING,\n      payload: {\n        id: id,\n        number: parseInt(e.target.value, 10),\n        date: {\n          plantingDate: calculateDates(date, 0), // just to format\n          harvestDate: calculateDates(date, growDays),\n        },\n      },\n    });\n  };\n\n  return (\n    <div className=\"plantRow\">\n      <label htmlFor={id}>{nameMap[id]}</label>\n      <input min={1} id={id} onChange={(e) => updateSelection(e)} type=\"number\" />\n    </div>\n  );\n};\n\nexport default LiveUnitRow;\n","import React, { useState } from \"react\";\nimport Select from \"react-select\";\nimport EcoIcon from \"@material-ui/icons/Eco\";\nimport LiveUnit from \"../LiveUnit\";\nimport LiveUnitRow from \"../LiveUnitRow\";\nimport { options, nameMap } from \"../../providers/plantData\";\nimport { useLiveContext, LiveUnitType } from \"../../providers/liveContext\";\n\nconst Live = () => {\n  const [selected, setSelected] = useState<string[]>([]);\n  const [date, setDate] = useState(\"2021-01-01\");\n  const { state, dispatch, ACTIONS }: any = useLiveContext();\n\n  const submitSelection = () => {\n    console.log(\"submit\");\n  };\n\n  const onDateChange = (e: any) => {\n    setDate(e.target.value);\n\n    dispatch({\n      type: ACTIONS.SET_DATE,\n      payload: e.target.value,\n    });\n  };\n\n  const onPlantChangeHandler = (selection: any, action: any) => {\n    if (action.action === \"remove-value\") {\n      dispatch({\n        type: ACTIONS.REMOVE_PLANTING_ITEM,\n        payload: action.removedValue.value,\n      });\n    }\n    if (action.action === \"clear\") {\n      dispatch({\n        type: ACTIONS.CLEAR_PLANTING,\n        payload: [],\n      });\n    }\n    let sel = selection?.map((item: any) => item.value);\n    setSelected(sel);\n  };\n\n  let liveCollection: any = [];\n\n  state.trayContent.map((unit: LiveUnitType, index: number) =>\n    new Array(unit.amount).fill(1).map((plantUnit, index) => {\n      liveCollection.push(\n        <LiveUnit key={index} id={unit.id} plantName={nameMap[unit.id]} date={unit.date.harvestDate} />\n      );\n    })\n  );\n\n  let isFull: any = state.capacity <= state.total ? { color: \"darkRed\" } : {};\n\n  return (\n    <div className=\"liveContainer\">\n      <div className=\"liveFormWrapper\">\n        <h3>Plant Selection</h3>\n        <div className=\"liveControl\">\n          <div className=\"liveControlItem\">\n            <label>\n              Planting Date:\n              <input\n                onChange={(e) => {\n                  onDateChange(e);\n                }}\n                type=\"date\"\n                value={date}\n              />\n            </label>\n          </div>\n          <div className=\"liveControlItem\">\n            <Select\n              onChange={(selection: any, action: any) =>\n                onPlantChangeHandler(selection, action)\n              }\n              isMulti\n              options={options}\n            />\n          </div>\n        </div>\n        {selected?.map((item, index) => (\n          <LiveUnitRow key={index} id={item} date={date} />\n        ))}\n        <div className=\"limits\">\n          <span style={isFull}>Capacity: {state.capacity}</span>\n          <span style={isFull}>Total: {state.total}</span>\n          <span>Remaining: {state.capacity - state.total}</span>\n        </div>\n        <div className=\"submitSelection\">\n          <button onClick={submitSelection}>\n            <EcoIcon /> Plant selected\n          </button>\n        </div>\n      </div>\n      <div className=\"liveWrapper\">{liveCollection}</div>\n    </div>\n  );\n};\n\nexport default Live;\n","import React from \"react\";\nimport Live from \"./components/Live\";\nimport Timeline from \"./components/Timeline\";\nimport { AppContextProvider } from \"./providers/context\";\nimport { LiveContextProvider } from \"./providers/liveContext\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <AppContextProvider>\n        <Timeline />\n      </AppContextProvider> */}\n      <LiveContextProvider>\n        <Live />\n      </LiveContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}