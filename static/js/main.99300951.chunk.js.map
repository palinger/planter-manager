{"version":3,"sources":["logo-green.svg","providers/liveContext.tsx","components/LiveUnit/index.tsx","providers/plantData.ts","components/LiveUnitRow/index.tsx","components/Live/index.tsx","providers/context.tsx","components/PlantEvent/index.tsx","components/PlantCycle/index.tsx","components/ModalContent/SoakInformation.tsx","components/ModalContent/GeneralInformation.tsx","components/ModalContent/GermInformation.tsx","components/ModalContent/GrowInformation.tsx","components/ModalContent/DayInformation.tsx","components/ModalContent/index.tsx","components/Legend/index.tsx","components/Timeline/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["_defs","_path","initialState","trayContent","plantingDate","moment","format","modalSelection","id","date","harvestDate","modalState","capacity","total","planted","Context","React","createContext","type","payload","ACTIONS","PLANTING","REMOVE_PLANTING_ITEM","CLEAR_PLANTING","PLANT_TO_TRAY","SET_DATE","CLEAR_TRAY","SELECTED_MODAL_EVENT","SET_MODAL_STATE","reducer","state","newItem","amount","number","updated","map","item","final","some","element","calculatedTotal","cleared","withoutRemoved","filter","itemToRemove","updatedTotal","tempState","LiveContextProvider","props","useReducer","dispatch","Provider","value","children","useLiveContext","useContext","LiveUnit","plantName","className","plantData","clean","time","solution","planting","seedWeight","unit","cycleData","soak","length","temp","germination","grow","lightCycle","waterCycle","ph","options","label","nameMap","peas","leak","redCabbage","brocolli","pakchoi","radish","borax","LiveUnitRow","calculateDates","dateString","days","Date","add","growDays","htmlFor","min","onChange","e","parseInt","target","updateSelection","Live","useState","selected","setSelected","setDate","selectInputRef","useRef","onPlantChangeHandler","selection","action","removedValue","sel","liveCollection","index","Array","fill","plantUnit","push","isFull","color","onDateChange","ref","isMulti","style","onClick","newTray","concat","current","select","clearValue","tray","plant","UPDATE_SELECTION","ALL_SELECTION","CLEAR_SELECTION","AppContextProvider","useAppContext","PlantEvent","isFirstEvent","eventId","calculatedDate","isFirst","eventType","getMoreOnEvent","PlantCycle","totalGrowDays","cycles","name","subtract","loopItem","SoakInformation","plantObject","GeneralInformation","GermInformation","GrowInformation","DayInformation","ModalContent","variants","selectedPlant","hasSoak","hasGermination","Legend","_extends","Object","assign","i","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgLogoGreen","_ref","svgRef","title","titleId","xmlns","viewBox","d","ForwardRef","Timeline","calculateIsWeekend","dm","onDateChangeHandler","ariaHideApp","isOpen","contentLabel","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99300951.chunk.js","sourcesContent":["var _defs, _path;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgLogoGreen(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"Layer_1\",\n    \"data-name\": \"Layer 1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 91.61 91.58\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"style\", null, \".cls-1{fill:#8cc540;}\"))), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    className: \"cls-1\",\n    d: \"M45.8,0A45.83,45.83,0,0,0,3.85,64.22C13.13,84.11,40.52,62.66,47,45.79,30.37,72-3.18,66.07,12.61,49.38,26.87,35.68,52,33.7,57.24,19.1,63.66,33,69.38,71.86,47.49,91.58A45.82,45.82,0,0,0,91.05,52.92a45,45,0,0,0,.56-7.11A45.81,45.81,0,0,0,45.8,0\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgLogoGreen);\nexport default __webpack_public_path__ + \"static/media/logo-green.f5308764.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useContext, useReducer } from \"react\";\nimport moment from \"moment\";\nimport { plantData } from \"./plantData\";\n\nexport type LiveDate = {\n  plantingDate: string;\n  harvestDate: string;\n};\n\nexport type ModalSelection = {\n  id: string; \n  date: LiveDate;\n};\n\nexport type LivePlantedType = {\n  id: number;\n  date: LiveDate;\n  trayContent: LiveUnitType[];\n};\n\nexport type LiveUnitType = {\n  id: string;\n  date: LiveDate;\n  amount: number;\n};\n\nexport type State = {\n  trayContent: LiveUnitType[];\n  plantingDate: string;\n  modalSelection: ModalSelection;\n  modalState: boolean;\n  capacity: number;\n  total: number;\n  planted: LivePlantedType[];\n};\n\nconst initialState: State = {\n  trayContent: [],\n  plantingDate: moment().format(\"YYYY-MM-DD\"),\n  modalSelection: {\n    id: \"\",\n    date: {\n      plantingDate: \"\",\n      harvestDate: \"\",\n    },\n  },\n  modalState: false,\n  capacity: 99,\n  total: 0,\n  planted: [],\n};\n\nconst Context = React.createContext([\n  initialState,\n  ({ type, payload }: any) => {\n    // do nohting.\n  },\n]);\n\nconst ACTIONS = {\n  PLANTING: \"PLANTING\",\n  REMOVE_PLANTING_ITEM: \"REMOVE_PLANTING_ITEM\",\n  CLEAR_PLANTING: \"CLEAR_PLANTING\",\n\n  PLANT_TO_TRAY: \"PLANT_TO_TRAY\",\n\n  SET_DATE: \"SET_DATE\",\n  CLEAR_TRAY: \"CLEAR_TRAY\",\n\n  SELECTED_MODAL_EVENT: \"SELECTED_MODAL_EVENT\",\n  SET_MODAL_STATE: \"SET_MODAL_STATE\",\n};\n\nexport const reducer = (state: State, { type, payload }: any) => {\n  switch (type) {\n    case \"PLANTING\":\n      const newItem: LiveUnitType = {\n        id: payload.id,\n        date: payload.date,\n        amount: payload.number,\n      };\n\n      const updated: LiveUnitType[] = state.trayContent.map((item) => {\n        if (item.id === payload.id) {\n          return newItem;\n        } else return item;\n      });\n\n      const isAlready = (element: LiveUnitType) => element.id === payload.id;\n\n      const final = {\n        ...state,\n        trayContent: state.trayContent.some(isAlready)\n          ? updated\n          : [...state.trayContent, newItem],\n      };\n\n      let calculatedTotal: number = 0;\n      final.trayContent.map(\n        (item) => (calculatedTotal = calculatedTotal + item.amount)\n      );\n      return { ...final, total: calculatedTotal };\n\n    case \"CLEAR_PLANTING\":\n      const cleared = {\n        ...state,\n        total: 0,\n      };\n\n      return { ...cleared, trayContent: payload };\n\n    case \"REMOVE_PLANTING_ITEM\":\n      let withoutRemoved: any = state.trayContent.filter(\n        (item) => item.id !== payload\n      );\n      let itemToRemove: any = state.trayContent.filter(\n        (item) => item.id === payload\n      );\n\n      let updatedTotal = state.total - itemToRemove[0].amount;\n      let tempState = { ...state, total: updatedTotal };\n      return { ...tempState, trayContent: withoutRemoved };\n\n    case \"SET_DATE\":\n      return { ...state, plantingDate: payload };\n\n    case \"CLEAR_TRAY\":\n      return { ...state, trayContent: payload };\n\n    case \"SELECTED_MODAL_EVENT\":\n      return { ...state, modalSelection: payload };\n\n    case \"SET_MODAL_STATE\":\n      return { ...state, modalState: payload };\n\n    case \"PLANT_TO_TRAY\":\n      return { ...state, planted: payload };\n\n    default:\n      return state;\n  }\n};\n\nexport const LiveContextProvider = (props: any) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <Context.Provider value={[state, dispatch]}>\n      {props.children}\n    </Context.Provider>\n  );\n};\n\nexport const useLiveContext = () => {\n  const [state, dispatch] = useContext(Context);\n\n  return {\n    state,\n    dispatch,\n    ACTIONS,\n  };\n};\n","import React from \"react\";\nimport TodayIcon from \"@material-ui/icons/Today\";\nimport EcoIcon from \"@material-ui/icons/Eco\";\nimport { useLiveContext } from \"../../providers/liveContext\";\nimport moment from 'moment';\n\ninterface LiveProps {\n  plantName: string;\n  id: string;\n  date: string;\n}\n\nconst LiveUnit = ({ id, plantName, date }: LiveProps) => {\n  const { dispatch, ACTIONS }: any = useLiveContext();\n\n  const getMoreOnEvent = (e: any, eventId: string, eventType: string) => {\n    dispatch({\n      type: ACTIONS.SELECTED_MODAL_EVENT,\n      payload: {\n        type: eventType,\n        id: eventId,\n        date: \"calculatedDate\",\n      },\n    });\n    dispatch({\n      type: ACTIONS.SET_MODAL_STATE,\n      payload: true,\n    });\n  };\n\n  return (\n    <div className=\"liveUnit\">\n      <EcoIcon />\n      <span>{plantName}</span>\n    </div>\n  );\n};\n\nexport default LiveUnit;\n","import { PlantData, Options } from \"./interface\";\nexport const plants = [\"leak\", \"peas\", \"redCabbage\", \"brocolli\", \"pakchoi\", \"radish\", \"borax\"];\nexport const plantData: PlantData[] = [\n  {\n    id: \"leak\",\n    plantName: \"Pórik\",\n    clean: {\n      time: \"15 min\",\n      solution: \"3%\",\n    },\n    planting: {\n      seedWeight: 3.5,\n      unit: \"kelimok\",\n    },\n    cycleData: {\n      soak: {\n        length: 1,\n        time: \"24 hours\",\n        temp: \"20 C\",\n      },\n      germination: {\n        length: 3,\n        time: \"3 days\",\n        temp: \"20 C\",\n      },\n      grow: {\n        length: 11,\n        lightCycle: \"regular\",\n        waterCycle: \"regular\",\n        ph: 6.6,\n        temp: \"20 C\",\n      },\n    },\n  },\n  {\n    id: \"peas\",\n    plantName: \"Hrášok\",\n    clean: {\n      time: \"15min\",\n      solution: \"3%\",\n    },\n    planting: {\n      seedWeight: 7.5,\n      unit: \"kelimok\",\n    },\n    cycleData: {\n      soak: {\n        length: 1,\n        time: \"24 hours\",\n        temp: \"22 C\",\n      },\n      germination: {\n        length: 2,\n        time: \"2 days\",\n        temp: \"22 C\",\n      },\n      grow: {\n        length: 12,\n        lightCycle: \"regular\",\n        waterCycle: \"regular\",\n        ph: 6.6,\n        temp: \"22 C\",\n      },\n    },\n  },\n  {\n    id: \"redCabbage\",\n    plantName: \"Červená kapusta\",\n    clean: {\n      time: \"15 min\",\n      solution: \"3%\",\n    },\n    planting: {\n      seedWeight: 3,\n      unit: \"kelimok\",\n    },\n    cycleData: {\n      soak: {\n        length: 0,\n        time: \"none\",\n        temp: \"20 C\",\n      },\n      germination: {\n        length: 3,\n        time: \"3 days\",\n        temp: \"20 C\",\n      },\n      grow: {\n        length: 7,\n        lightCycle: \"regular\",\n        waterCycle: \"regular\",\n        ph: 6.6,\n        temp: \"20 C\",\n      },\n    },\n  },\n  {\n    id: \"brocolli\",\n    plantName: \"Brokolica\",\n    clean: {\n      time: \"15 min\",\n      solution: \"3%\",\n    },\n    planting: {\n      seedWeight: 2.3,\n      unit: \"kelimok\",\n    },\n    cycleData: {\n      soak: {\n        length: 0,\n        time: \"none\",\n        temp: \"20 C\",\n      },\n      germination: {\n        length: 2,\n        time: \"2 days\",\n        temp: \"20 C\",\n      },\n      grow: {\n        length: 7,\n        lightCycle: \"regular\",\n        waterCycle: \"regular\",\n        ph: 6.6,\n        temp: \"20 C\",\n      },\n    },\n  },\n  {\n    id: \"pakchoi\",\n    plantName: \"Pak Choi\",\n    clean: {\n      time: \"15 min\",\n      solution: \"3%\",\n    },\n    planting: {\n      seedWeight: 3,\n      unit: \"kelimok\",\n    },\n    cycleData: {\n      soak: {\n        length: 0,\n        time: \"none\",\n        temp: \"20 C\",\n      },\n      germination: {\n        length: 3,\n        time: \"3 days\",\n        temp: \"20 C\",\n      },\n      grow: {\n        length: 7,\n        lightCycle: \"regular\",\n        waterCycle: \"regular\",\n        ph: 6.6,\n        temp: \"20 C\",\n      },\n    },\n  },\n  {\n    id: \"radish\",\n    plantName: \"Reďkovka - Rambo\",\n    clean: {\n      time: \"15 min\",\n      solution: \"3%\",\n    },\n    planting: {\n      seedWeight: 4,\n      unit: \"kelimok\",\n    },\n    cycleData: {\n      soak: {\n        length: 0,\n        time: \"none\",\n        temp: \"20 C\",\n      },\n      germination: {\n        length: 3,\n        time: \"3 days\",\n        temp: \"20 C\",\n      },\n      grow: {\n        length: 6,\n        lightCycle: \"regular\",\n        waterCycle: \"regular\",\n        ph: 6.6,\n        temp: \"20 C\",\n      },\n    },\n  },\n  {\n    id: \"borax\",\n    plantName: \"Borák\",\n    clean: {\n      time: \"15 min\",\n      solution: \"3%\",\n    },\n    planting: {\n      seedWeight: 3.5,\n      unit: \"kelimok\",\n    },\n    cycleData: {\n      soak: {\n        length: 2,\n        time: \"2 days\",\n        temp: \"20 C\",\n      },\n      germination: {\n        length: 4,\n        time: \"4 days\",\n        temp: \"20 C\",\n      },\n      grow: {\n        length: 9,\n        lightCycle: \"regular\",\n        waterCycle: \"regular\",\n        ph: 6.6,\n        temp: \"20 C\",\n      },\n    },\n  },\n];\n\nexport const options: Options[] = [\n  {\n    label: \"Hrášok\",\n    value: \"peas\",\n  },\n  {\n    label: \"Pórik\",\n    value: \"leak\",\n  },\n  {\n    label: \"Červená kapusta\",\n    value: \"redCabbage\",\n  },\n  {\n    label: \"Brokolica\",\n    value: \"brocolli\",\n  },\n  {\n    label: \"Pak Choi\",\n    value: \"pakchoi\",\n  },\n  {\n    label: \"Reďkovka\",\n    value: \"radish\",\n  },\n  {\n    label: \"Borák\",\n    value: \"borax\",\n  },\n];\n\nexport type NameMap = {\n  [name: string]: string\n};\n\nexport const nameMap: NameMap = {\n  peas: \"Hrášok\",\n  leak: \"Pórik\",\n  redCabbage: \"Červená kapusta\",\n  brocolli: \"Brokolica\",\n  pakchoi: \"Pak Choi\",\n  radish:\"Reďkovka\",\n  borax: \"Borák\",\n}","import React, { useEffect, useState } from \"react\";\nimport { plantData, nameMap } from \"../../providers/plantData\";\nimport { PlantData } from \"../../providers/interface\";\n// import DayIcon from \"@material-ui/icons/Today\";\nimport moment from \"moment\";\nimport { useLiveContext, LiveUnitType } from \"../../providers/liveContext\";\n\ninterface LiveUnitRowProps {\n  date: string;\n  id: string;\n}\n\nconst LiveUnitRow = ({ id, date }: LiveUnitRowProps) => {\n  const { dispatch, ACTIONS }: any = useLiveContext();\n\n  const calculateDates = (dateString: string, days: number) => {\n    let d = moment(new Date(dateString));\n    let dm = d.add(days, \"days\");\n    return dm.format(\"dd DD. MM.\");\n  };\n\n  let growDays: number = 0;\n\n  plantData.map((item) => {\n    if (item.id === id) {\n      growDays = item.cycleData.grow.length;\n    }\n  });\n\n  const updateSelection = (e: any) => {\n    dispatch({\n      type: ACTIONS.PLANTING,\n      payload: {\n        id: id,\n        number: parseInt(e.target.value, 10),\n        date: {\n          plantingDate: calculateDates(date, 0), // just to format\n          harvestDate: calculateDates(date, growDays),\n        },\n      },\n    });\n  };\n\n  return (\n    <div className=\"plantRow\">\n      <label htmlFor={id}>{nameMap[id]}</label>\n      <input min={1} id={id} onChange={(e) => updateSelection(e)} type=\"number\" />\n    </div>\n  );\n};\n\nexport default LiveUnitRow;\n","import React, { useState, useRef } from \"react\";\nimport Select from \"react-select\";\nimport EcoIcon from \"@material-ui/icons/Eco\";\nimport LiveUnit from \"../LiveUnit\";\nimport LiveUnitRow from \"../LiveUnitRow\";\nimport { options, nameMap } from \"../../providers/plantData\";\nimport { useLiveContext, LiveUnitType, LivePlantedType } from \"../../providers/liveContext\";\nimport moment from \"moment\";\n\nconst Live = () => {\n  const [selected, setSelected] = useState<string[]>([]);\n  const [date, setDate] = useState(moment().format(\"YYYY-MM-DD\"));\n  const { state, dispatch, ACTIONS }: any = useLiveContext();\n\n  const selectInputRef = useRef<Select>(null);\n\n  const submitSelection = () => {\n    const newTray = {\n      id: state.planted.length +1,\n      date: date,\n      trayContent: state.trayContent,\n    };\n\n    dispatch({\n      type: ACTIONS.PLANT_TO_TRAY,\n      payload: state.planted.concat(newTray),\n    });\n\n    dispatch({\n      type: ACTIONS.CLEAR_TRAY,\n      payload: [],\n    });\n\n    setSelected([]);\n    selectInputRef.current && selectInputRef.current.select.clearValue();\n  };\n\n  const onDateChange = (e: any) => {\n    setDate(e.target.value);\n\n    dispatch({\n      type: ACTIONS.SET_DATE,\n      payload: e.target.value,\n    });\n    onPlantChangeHandler([], \"clear\");\n  };\n\n  const onPlantChangeHandler = (selection: any, action: any) => {\n    if (action.action === \"remove-value\") {\n      dispatch({\n        type: ACTIONS.REMOVE_PLANTING_ITEM,\n        payload: action.removedValue.value,\n      });\n    }\n    if (action.action === \"clear\") {\n      dispatch({\n        type: ACTIONS.CLEAR_PLANTING,\n        payload: [],\n      });\n    }\n    let sel = selection?.map((item: any) => item.value);\n    setSelected(sel);\n  };\n\n  let liveCollection: JSX.Element[] = [];\n\n  state.trayContent.map((unit: LiveUnitType, index: number) =>\n    new Array(unit.amount).fill(1).map((plantUnit, index) => {\n      liveCollection.push(\n        <LiveUnit\n          key={index}\n          id={unit.id}\n          plantName={nameMap[unit.id]}\n          date={unit.date.harvestDate}\n        />\n      );\n    })\n  );\n\n  let isFull: any = state.capacity <= state.total ? { color: \"darkRed\" } : {};\n\n  return (\n    <div className=\"liveContainer\">\n      <div className=\"liveFormWrapper\">\n        <h3>Plant Selection</h3>\n        <div className=\"liveControl\">\n          <div className=\"liveControlItem\">\n            <label>\n              Planting Date:\n              <input\n                onChange={(e) => {\n                  onDateChange(e);\n                }}\n                type=\"date\"\n                value={date}\n              />\n            </label>\n          </div>\n          <div className=\"liveControlItem\">\n            <Select\n              onChange={(selection: any, action: any) =>\n                onPlantChangeHandler(selection, action)\n              }\n              ref={selectInputRef}\n              isMulti\n              options={options}\n            />\n          </div>\n        </div>\n        {selected?.map((item, index) => (\n          <LiveUnitRow key={index} id={item} date={date} />\n        ))}\n        <div className=\"limits\">\n          <span style={isFull}>Capacity: {state.capacity}</span>\n          <span style={isFull}>Total: {state.total}</span>\n          <span>Remaining: {state.capacity - state.total}</span>\n        </div>\n        <div className=\"submitSelection\">\n          <button onClick={submitSelection}>\n            <EcoIcon /> Plant selected\n          </button>\n        </div>\n      </div>\n      <div className=\"trayContent\">\n        {state.planted.map((tray:LivePlantedType) => (\n          <div className=\"tray\">\n            <h5>Tray no. {tray.id}</h5>\n            <span>Planted on {tray.date}</span>\n            {tray.trayContent.map((plant) => (\n              <p>{plant.id}:<span>{plant.amount}</span></p>\n            ))}\n          </div>\n        ))}\n      </div>\n      <div className=\"liveWrapper\">{liveCollection}</div>\n    </div>\n  );\n};\n\nexport default Live;\n","import React, { useContext, useReducer } from \"react\";\nimport moment from \"moment\";\n\nexport type ModalSelection = {\n  id: string;\n  type: string;\n  date: string;\n};\n\nexport type State = {\n  selection: string[];\n  harvestDate: string;\n  modalSelection: ModalSelection;\n  modalState: boolean;\n};\n\nconst initialState: State = {\n  selection: [],\n  harvestDate: moment().format(\"YYYY-MM-DD\"),\n  modalSelection: {\n    id: \"\",\n    type: \"\",\n    date: \"\",\n  },\n  modalState: false,\n};\n\nconst Context = React.createContext([\n  initialState,\n  ({ type, payload }: any) => {\n    // do nohting.\n  },\n]);\n\nconst ACTIONS = {\n  SET_DATE: \"SET_DATE\",\n  // CLEAR_DATE: \"CLEAR_DATE\",\n  \n  UPDATE_SELECTION: \"UPDATE_SELECTION\",\n  ALL_SELECTION: \"ALL_SELECTION\",\n  CLEAR_SELECTION: \"CLEAR_SELECTION\",\n\n  SELECTED_MODAL_EVENT: \"SELECTED_MODAL_EVENT\",\n  SET_MODAL_STATE: \"SET_MODAL_STATE\",\n};\n\nexport const reducer = (state: State, { type, payload }: any) => {\n  switch (type) {\n    case \"UPDATE_SELECTION\":\n      return { ...state, selection: payload };\n\n    case \"CLEAR_SELECTION\":\n      return { ...state, selection: payload };\n\n    case \"ALL_SELECTION\":\n      return { ...state, selection: payload };\n\n    // case \"CLEAR_DATE\":\n    //   return { ...state, harvestDate: \"payload\" };\n\n    case \"SET_DATE\":\n      return { ...state, harvestDate: payload };\n\n    case \"SELECTED_MODAL_EVENT\":\n      return { ...state, modalSelection: payload };\n\n    case \"SET_MODAL_STATE\":\n      return { ...state, modalState: payload };\n\n    default:\n      return state;\n  }\n};\n\nexport const AppContextProvider = (props: any) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <Context.Provider value={[state, dispatch]}>\n      {props.children}\n    </Context.Provider>\n  );\n};\n\nexport const useAppContext = () => {\n  const [state, dispatch] = useContext(Context);\n\n  return {\n    state,\n    dispatch,\n    ACTIONS,\n  };\n};\n","import React from \"react\";\nimport TodayIcon from \"@material-ui/icons/Today\";\nimport MoreIcon from \"@material-ui/icons/MoreHoriz\";\nimport { useAppContext } from \"../../providers/context\";\n\ninterface PlantEventProps {\n  length: number;\n  plantName: string;\n  calculatedDate: string;\n  id: string;\n  type: \"soak\" | \"germination\" | \"grow\";\n  isFirst: boolean;\n}\n\nconst PlantEvent = ({\n  plantName,\n  length,\n  type,\n  calculatedDate,\n  id,\n  isFirst,\n}: PlantEventProps) => {\n  const { dispatch, ACTIONS }: any = useAppContext();\n  \n  const getMoreOnEvent = (e: any, eventId: string, eventType: string) => {\n    dispatch({\n      type: ACTIONS.SELECTED_MODAL_EVENT,\n      payload: {\n        type: eventType,\n        id: eventId,\n        date: calculatedDate\n      }\n    })\n    dispatch({\n      type: ACTIONS.SET_MODAL_STATE,\n      payload: true\n    })\n  };\n\n  const renderIcon = (isFirstEvent: boolean, eventId: string, eventType: string) => {\n    if (isFirstEvent) {\n      return <TodayIcon onClick={(e) => getMoreOnEvent(e, eventId, type)} className=\"iconEvent\"  />;\n    } else return <MoreIcon />;\n  };\n\n  return (\n    <div className=\"plantEventContainer\">\n      <div className=\"plantEvent\">\n        <span className={type} >\n          {renderIcon(isFirst, id, type)}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default PlantEvent;\n","import React from \"react\";\nimport PlantEvent from \"../PlantEvent\";\nimport { plantData } from \"../../providers/plantData\";\nimport moment from \"moment\";\n\ninterface PlantCycleProps {\n  id: string;\n  harvestDate: string;\n}\n\nconst PlantCycle = ({ id, harvestDate }: PlantCycleProps) => {\n  let totalGrowDays: number = 0;\n  let cycles: any = [];\n  let name: string = \"\";\n\n  const calculateDates = (date: any, days: number) => {\n    let d = moment(new Date(date));\n    let dm = d.subtract(days - 1, \"days\");\n    return dm.format(\"ddd, MMM Do YYYY\");\n  };\n\n  plantData.map((item) => {\n    if (item.id === id) {\n      return (totalGrowDays =\n        item.cycleData.soak.length +\n        item.cycleData.germination.length +\n        item.cycleData.grow.length);\n    }\n    return null;\n  });\n\n  plantData.map((item, index) => {\n    if (item.id === id) {\n      new Array(item.cycleData.soak.length)\n        .fill(0)\n        .map((loopItem, index: number) => {\n          return cycles.push(\n            <PlantEvent\n              key={index}\n              plantName={item.plantName}\n              calculatedDate={\n                index === 0 ? calculateDates(harvestDate, totalGrowDays) : \"\"\n              }\n              id={item.id}\n              type=\"soak\"\n              length={item.cycleData.soak.length}\n              isFirst={index === 0 ? true : false}\n            />\n          );\n        });\n\n      new Array(item.cycleData.germination.length)\n        .fill(0)\n        .map((loopItem, index: number) => {\n          return cycles.push(\n            <PlantEvent\n              key={index + 50}\n              plantName={item.plantName}\n              calculatedDate={\n                index === 0\n                  ? calculateDates(\n                      harvestDate,\n                      totalGrowDays - item.cycleData.soak.length\n                    )\n                  : \"\"\n              }\n              id={item.id}\n              type=\"germination\"\n              length={item.cycleData.germination.length}\n              isFirst={index === 0 ? true : false}\n            />\n          );\n        });\n\n      new Array(item.cycleData.grow.length)\n        .fill(0)\n        .map((loopItem, index: number) => {\n          return cycles.push(\n            <PlantEvent\n              key={index + 100}\n              plantName={item.plantName}\n              calculatedDate={\n                index === 0\n                  ? calculateDates(\n                      harvestDate,\n                      totalGrowDays -\n                        item.cycleData.soak.length -\n                        item.cycleData.germination.length\n                    )\n                  : \"\"\n              }\n              id={item.id}\n              type=\"grow\"\n              length={item.cycleData.grow.length}\n              isFirst={index === 0 ? true : false}\n            />\n          );\n        });\n      return null;\n    } else return null;\n  });\n\n  plantData.map((item) => {\n    if (item.id === id) {\n      name = item.plantName;\n    }\n    return null\n  });\n\n  return (\n    <div className=\"plantCycle\">\n      <h3>{name}</h3>\n      {cycles}\n    </div>\n  );\n};\n\nexport default PlantCycle;\n","import React from \"react\";\nimport ClockIcon from \"@material-ui/icons/Timer\";\nimport { ContentProps } from \"../../providers/interface\";\n\nconst SoakInformation = ({ plantObject }: ContentProps) => {\n  return (\n    <div className=\"soakInformation modalBox\">\n      <h3>Soak</h3>\n      <p><ClockIcon /> Time: {plantObject.cycleData.soak.time}</p>\n      <hr/>\n    </div>\n  );\n};\n\nexport default SoakInformation;\n","import React from \"react\";\nimport { ContentProps } from \"../../providers/interface\";\nimport SolutionIcon from \"@material-ui/icons/FormatColorFill\";\nimport ClockIcon from \"@material-ui/icons/Timer\";\nimport WeightIcon from \"@material-ui/icons/FitnessCenter\";\nimport PerIcon from \"@material-ui/icons/Widgets\";\n\nconst GeneralInformation = ({ plantObject }: ContentProps) => {\n  return (\n    <div className=\"generalInformation  modalBox\">\n        <h3>Cleaning</h3>\n        <p>\n          <ClockIcon /> Time: {plantObject.clean.time}\n        </p>\n        <p>\n          <SolutionIcon /> Solution: {plantObject.clean.solution}\n        </p>\n        <hr />\n        <h3>Planting </h3>\n        <p>\n          <WeightIcon /> Seed weight: {plantObject.planting.seedWeight}g\n        </p>\n        <p>\n          <PerIcon /> Unit: {plantObject.planting.unit}\n        </p>\n        <hr />\n      </div>\n\n  );\n};\n\nexport default GeneralInformation;\n","import React from \"react\";\nimport ClockIcon from \"@material-ui/icons/Timer\";\nimport { ContentProps } from \"../../providers/interface\";\n\nconst GermInformation = ({ plantObject }: ContentProps) => {\n  return (\n    <div className=\"germInformation modalBox\">\n      <h3>Germination</h3>\n      <p><ClockIcon /> Time: {plantObject.cycleData.germination.time}</p>\n      <hr/>\n    </div>\n  );\n};\n\nexport default GermInformation;\n","import React from \"react\";\nimport { ContentProps } from \"../../providers/interface\";\nimport TempIcon from \"@material-ui/icons/WbSunny\";\nimport PHIcon from \"@material-ui/icons/Opacity\";\nimport WaterIcon from \"@material-ui/icons/Waves\";\nimport LightsIcon from \"@material-ui/icons/WbIncandescent\";\nimport ClockIcon from \"@material-ui/icons/Timer\";\n\nconst GrowInformation = ({ plantObject }: ContentProps) => {\n  return (\n    <div className=\"growInformation modalBox\">\n      <h3>Grow</h3>\n      <p><ClockIcon /> Time: {plantObject.cycleData.grow.length} days</p>\n      <p><TempIcon /> Temperature: {plantObject.cycleData.grow.temp}</p>\n      <p><PHIcon /> Water Ph: {plantObject.cycleData.grow.ph}</p>\n      <p><LightsIcon /> LightCycle: {plantObject.cycleData.grow.lightCycle}</p>\n      <p><WaterIcon /> WaterCycle: {plantObject.cycleData.grow.waterCycle}</p>\n    </div>\n  );\n};\n\nexport default GrowInformation;\n","import React from \"react\";\nimport DayIcon from \"@material-ui/icons/Today\";\n\ninterface DayInformationProps { \n  date: string\n}\n\nconst DayInformation = ({ date }: DayInformationProps) => {\n  return (\n    <div className=\"dayInformation modalBox\">\n      <p><DayIcon /> <b>{date}</b></p>\n    </div>\n  );\n};\n\nexport default DayInformation;\n","import React from \"react\";\nimport { ModalSelection } from \"../../providers/context\";\nimport SoakInformation from \"./SoakInformation\";\nimport GeneralInformation from \"./GeneralInformation\";\nimport GermInformation from \"./GermInformation\";\nimport GrowInformation from \"./GrowInformation\";\nimport DayInformation from \"./DayInformation\";\nimport { plantData } from \"../../providers/plantData\";\n\ninterface ModalContentProps {\n  variants: ModalSelection;\n}\n\nconst ModalContent = ({ variants }: ModalContentProps) => {\n  let selected = plantData.filter((item) => item.id === variants.id);\n  let selectedPlant = selected[0];\n  let hasSoak: boolean = selectedPlant.cycleData.soak.length > 0;\n  let hasGermination: boolean = selectedPlant.cycleData.germination.length > 0;\n\n  if (variants.type === \"soak\") {\n    return (\n      <>\n        <DayInformation date={variants.date} />\n        <GeneralInformation plantObject={selectedPlant} />\n        <SoakInformation plantObject={selectedPlant} />\n      </>\n    );\n  }\n\n  if (variants.type === \"germination\") {\n    if (hasSoak) {\n      return (\n        <>\n          <DayInformation date={variants.date} />\n          <GermInformation plantObject={selectedPlant} />\n        </>\n      );\n    } else\n      return (\n        <>\n          <DayInformation date={variants.date} />\n          <GeneralInformation plantObject={selectedPlant} />\n          <GermInformation plantObject={selectedPlant} />\n        </>\n      );\n  } else {\n    if (hasSoak && !hasGermination) {\n      return (\n        <>\n          <DayInformation date={variants.date} />\n          <GermInformation plantObject={selectedPlant} />\n          <GrowInformation plantObject={selectedPlant} />\n        </>\n      );\n    }\n    if (!hasSoak && hasGermination) {\n      return (\n        <>\n          <DayInformation date={variants.date} />\n          <GrowInformation plantObject={selectedPlant} />\n        </>\n      );\n    }\n    if (!hasSoak && !hasGermination) {\n      return (\n        <>\n          <DayInformation date={variants.date} />\n          <GeneralInformation plantObject={selectedPlant} />\n          <SoakInformation plantObject={selectedPlant} />\n          <GermInformation plantObject={selectedPlant} />\n          <GrowInformation plantObject={selectedPlant} />\n        </>\n      );\n    } else {\n      return (\n        <>\n          <GrowInformation plantObject={selectedPlant} />\n        </>\n      );\n    }\n  }\n};\n\nexport default ModalContent;\n","import React from \"react\";\nimport DayIcon from \"@material-ui/icons/Today\";\nimport MoreIcon from \"@material-ui/icons/MoreHoriz\";\n\nconst Legend = () => {\n  return (\n    <div className=\"legend\">\n      <div className=\"clickable\">\n        <div className=\"plantEvent\">\n          <span className=\"soak\">\n            <DayIcon />\n          </span>\n          - Soak Event\n        </div>\n        <div className=\"plantEvent\">\n          <span className=\"germination\">\n            <DayIcon />\n          </span>\n          - Germination Event\n        </div>\n        <div className=\"plantEvent\">\n          <span className=\"grow\">\n            <DayIcon />\n          </span>\n          - Grow Event\n        </div>\n      </div>\n      <div className=\"nonClickable\">\n        <div className=\"plantEvent\">\n          <span className=\"soak\">\n            <MoreIcon />\n          </span>\n        </div>\n        <div className=\"plantEvent\">\n          <span className=\"germination\">\n            <MoreIcon />\n          </span>\n        </div>\n        <div className=\"plantEvent\">\n          <span className=\"grow\">\n            <MoreIcon />\n          </span>\n        </div>\n        - Continuation Events\n      </div>\n    </div>\n  );\n};\n\nexport default Legend;\n","import React from \"react\";\nimport Select from \"react-select\";\nimport Modal from \"react-modal\";\nimport moment from \"moment\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport { useAppContext } from \"../../providers/context\";\nimport { plantData, options } from \"../../providers/plantData\";\nimport PlantCycle from \"../PlantCycle\";\nimport ModalContent from \"../ModalContent\";\nimport Legend from \"../Legend\";\nimport { ReactComponent as Logo } from \"../../logo-green.svg\";\nconst Timeline = () => {\n  const { state, dispatch, ACTIONS }: any = useAppContext();\n\n  const closeModal = () => {\n    dispatch({\n      type: ACTIONS.SET_MODAL_STATE,\n      payload: false,\n    });\n  };\n\n  const onPlantChangeHandler = (selection: any) => {\n    dispatch({\n      type: ACTIONS.UPDATE_SELECTION,\n      payload: selection?.map((item: any) => item.value),\n    });\n  };\n\n  const onDateChangeHandler = (e: any) => {\n    dispatch({\n      type: ACTIONS.SET_DATE,\n      payload: e.target.value,\n    });\n  };\n\n  const onClearHandler = () => {\n    dispatch({\n      type: ACTIONS.CLEAR_SELECTION,\n      payload: [],\n    });\n  };\n\n  const onSelectAllHandler = () => {\n    dispatch({\n      type: ACTIONS.ALL_SELECTION,\n      payload: plantData.map((item) => item.id),\n    });\n  };\n\n  const calculateDates = (date: string, days: number) => {\n    let d = moment(new Date(date));\n    let dm = d.subtract(days, \"days\");\n    return dm.format(\"dd DD. MM.\");\n  };\n\n  const calculateIsWeekend = (date: string, days: number) => {\n    let d = moment(new Date(date));\n    let dm = d.subtract(days, \"days\");\n    if (dm.format(\"dd\") === \"Sa\" || dm.format(\"dd\") === \"Su\") {\n      return (days + 1) % 7 === 0 ? \"seven weekend\" : \"weekend\";\n    } else {\n      return (days + 1) % 7 === 0 ? \"seven\" : \"\";\n    }\n  };\n  calculateIsWeekend(state.harvestDate, 1);\n  return (\n    <div className=\"timelineContainer\">\n      <span>\n        <Logo className=\"logo\" />\n        <h1>MicroVeg</h1>\n      </span>\n      <small>Planter Manager</small>\n      <div className=\"controls\">\n        <div className=\"form\">\n          <label htmlFor=\"harverstDate\">Harvest Date:</label>\n          <input\n            id=\"harvestDate\"\n            type=\"date\"\n            value={state.harvestDate}\n            onChange={(e) => {\n              onDateChangeHandler(e);\n            }}\n          />\n          <div className=\"selectWrapper\">\n            <Select\n              onChange={(selection: any) => onPlantChangeHandler(selection)}\n              isMulti\n              options={options}\n            />\n          </div>\n          <button\n            onClick={() => {\n              onClearHandler();\n            }}\n          >\n            Clear\n          </button>\n          <button\n            onClick={() => {\n              onSelectAllHandler();\n            }}\n          >\n            Sellect all\n          </button>\n        </div>\n        <Legend />\n      </div>\n      <div className=\"overflowWrapper\">\n        <div className=\"visualWrapper\">\n          {state.selection.length > 0 &&\n            <div className=\"dayNumbers\">\n              {new Array(16).fill(0).map((item: number, index: number) => {\n                return (\n                  <div\n                    key={index}\n                    className={calculateIsWeekend(state.harvestDate, index)}\n                  >\n                    <div>{calculateDates(state.harvestDate, index)}</div>\n                  </div>\n                );\n              })}\n            </div>\n          }\n          <div>\n            {state?.selection?.map((item: string, index: number) => {\n              return (\n                <PlantCycle\n                  key={index}\n                  id={item}\n                  harvestDate={state.harvestDate}\n                />\n              );\n            })}\n          </div>\n          {state.selection.length > 3 &&\n            <div className=\"dayNumbers\">\n              {new Array(16).fill(0).map((item: number, index: number) => {\n                return (\n                  <div\n                    key={index}\n                    className={calculateIsWeekend(state.harvestDate, index)}\n                  >\n                    <div>{calculateDates(state.harvestDate, index)}</div>\n                  </div>\n                );\n              })}\n            </div>\n          }\n        </div>\n        <Modal\n          ariaHideApp={false}\n          isOpen={state.modalState}\n          contentLabel=\"Example Modal\"\n        >\n          <ClearIcon className=\"clearIcon\" onClick={closeModal} />\n          <div className=\"modalContent\">\n            <ModalContent variants={state.modalSelection} />\n          </div>\n        </Modal>\n      </div>\n    </div>\n  );\n};\n\nexport default Timeline;\n","import React from \"react\";\nimport Live from \"./components/Live\";\nimport Timeline from \"./components/Timeline\";\nimport { AppContextProvider } from \"./providers/context\";\nimport { LiveContextProvider } from \"./providers/liveContext\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppContextProvider>\n        <Timeline />\n      </AppContextProvider>\n      <LiveContextProvider>\n        <Live />\n      </LiveContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}