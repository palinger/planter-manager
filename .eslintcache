[{"/Users/pavel.hincek/WebstormProjects/planter-manager/src/App.tsx":"1","/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/PlantCycle/index.tsx":"2","/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/PlantEvent/index.tsx":"3","/Users/pavel.hincek/WebstormProjects/planter-manager/src/index.tsx":"4","/Users/pavel.hincek/WebstormProjects/planter-manager/src/providers/context.tsx":"5","/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/Timeline/index.tsx":"6","/Users/pavel.hincek/WebstormProjects/planter-manager/src/providers/plantData.ts":"7","/Users/pavel.hincek/WebstormProjects/planter-manager/src/reportWebVitals.ts":"8"},{"size":733,"mtime":1609864613000,"results":"9","hashOfConfig":"10"},{"size":2872,"mtime":1609972655000,"results":"11","hashOfConfig":"10"},{"size":879,"mtime":1609972772000,"results":"12","hashOfConfig":"10"},{"size":500,"mtime":1609362135000,"results":"13","hashOfConfig":"10"},{"size":1572,"mtime":1609864552000,"results":"14","hashOfConfig":"10"},{"size":1649,"mtime":1609971743000,"results":"15","hashOfConfig":"10"},{"size":900,"mtime":1609971013000,"results":"16","hashOfConfig":"10"},{"size":425,"mtime":1609354663000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"1gbuthj",{"filePath":"21","messages":"22","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/pavel.hincek/WebstormProjects/planter-manager/src/App.tsx",["38","39","40","41"],"import React from \"react\";\nimport PlantCycle from \"./components/PlantCycle\";\nimport Timeline from \"./components/Timeline\";\nimport { ContextProvider } from \"./providers/context\";\nimport { useAppContext } from \"./providers/context\";\nimport { State } from \"./providers/context\"\n// import PlantEvent from \"./components/PlantEvent\";\n\nimport \"./App.css\";\n\nconst cycleData = [\n  {\n    plantName: \"hrasok\",\n    soakLength: 1,\n    germinationLength: 1,\n    growLength: 2,\n  },\n  {\n    plantName: \"leak\",\n    soakLength: 1,\n    germinationLength: 2,\n    growLength: 3,\n  },\n];\n\nfunction App() {\n  return (\n    <ContextProvider>\n      <div className=\"App\">\n        <Timeline />\n\n\n      </div>\n    </ContextProvider>\n  );\n}\n\nexport default App;\n","/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/PlantCycle/index.tsx",["42","43","44","45","46"],"import React from \"react\";\nimport PlantEvent from \"../PlantEvent\";\nimport { plantData } from \"../../providers/plantData\";\nimport moment from \"moment\";\n\nexport type LightCycle = \"regular\" | \"short\" | \"long\";\nexport type WaterCycle = \"regular\" | \"short\" | \"long\";\n\ninterface PlantCycleProps {\n  id: string;\n  harvestDate: string;\n}\n\nconst PlantCycle = ({ id, harvestDate }: PlantCycleProps) => {\n\n  let totalGrowDays: number = 0;\n  let cycles: any = [];\n\n  const calculateDates = (date: any, days: number) => {\n    let d = moment(new Date(date));\n    let dm = d.subtract(days, \"days\");\n    return dm.format(\"ddd, MMM Do YYYY\");\n  };\n\n  plantData.map((item) => {\n    if (item.id === id) {\n      totalGrowDays =\n        item.cycleData.soakLength +\n        item.cycleData.germinationLength +\n        item.cycleData.growLength;\n    }\n  });\n\n  plantData.map((item, index) => {\n    if (item.id === id) {\n      new Array(item.cycleData.soakLength)\n        .fill(0)\n        .map((loopItem, index: number) => {\n          cycles.push(\n            <PlantEvent\n              key={index}\n              plantName={item.plantName}\n              calculatedDate={\n                index === 0 ? calculateDates(harvestDate, totalGrowDays) : \"\"\n              }\n              id={item.id}\n              type=\"soak\"\n              length={item.cycleData.soakLength}\n            />\n          );\n        });\n\n      new Array(item.cycleData.germinationLength)\n        .fill(0)\n        .map((loopItem, index: number) => {\n          cycles.push(\n            <PlantEvent\n              key={index + 50}\n              plantName={item.plantName}\n              calculatedDate={\n                index === 0\n                  ? calculateDates(\n                      harvestDate,\n                      totalGrowDays - item.cycleData.soakLength\n                    )\n                  : \"\"\n              }\n              id={item.id}\n              type=\"germination\"\n              length={item.cycleData.germinationLength}\n            />\n          );\n        });\n\n      new Array(item.cycleData.growLength)\n        .fill(0)\n        .map((loopItem, index: number) => {\n          cycles.push(\n            <PlantEvent\n              key={index + 100}\n              plantName={item.plantName}\n              calculatedDate={\n                index === 0\n                  ? calculateDates(\n                      harvestDate,\n                      totalGrowDays -\n                        item.cycleData.soakLength -\n                        item.cycleData.germinationLength\n                    )\n                  : \"\"\n              }\n              id={item.id}\n              type=\"grow\"\n              length={item.cycleData.growLength}\n            />\n          );\n        });\n    }\n  });\n\n  return (\n    <>\n      \n      <div className=\"plantCycle\"><h1>{id}</h1>{cycles}</div>\n    </>\n  );\n};\n\nexport default PlantCycle;\n","/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/PlantEvent/index.tsx",["47","48"],"import React, { useState } from \"react\";\n\ninterface PlantEventProps {\n  length: number;\n  plantName: string;\n  calculatedDate: string;\n  id: string;\n  type: \"soak\" | \"germination\" | \"grow\";\n}\n\nconst PlantEvent = ({\n  plantName,\n  length,\n  type,\n  calculatedDate,\n  id,\n}: PlantEventProps) => {\n  const [setModalState, modalState] = useState(false);\n\n  const getMoreOnEvent = (e: React.MouseEvent) => {\n    console.log(e);\n  };\n\n  return (\n    <div className=\"plantEventContainer\">\n      <div className=\"plantEvent\">\n        <span className={type} onClick={(e) => getMoreOnEvent(e)}>\n          {/* Props: <br />\n          plantName: {plantName}\n          <br />\n          type: {type}\n          <br /> */}\n           {/* {calculatedDate} */}\n          {/* <br />\n          id: {id}\n          <br /> */}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default PlantEvent;\n","/Users/pavel.hincek/WebstormProjects/planter-manager/src/index.tsx",[],["49","50"],"/Users/pavel.hincek/WebstormProjects/planter-manager/src/providers/context.tsx",[],"/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/Timeline/index.tsx",["51"],"/Users/pavel.hincek/WebstormProjects/planter-manager/src/providers/plantData.ts",[],"/Users/pavel.hincek/WebstormProjects/planter-manager/src/reportWebVitals.ts",[],{"ruleId":"52","severity":1,"message":"53","line":2,"column":8,"nodeType":"54","messageId":"55","endLine":2,"endColumn":18},{"ruleId":"52","severity":1,"message":"56","line":5,"column":10,"nodeType":"54","messageId":"55","endLine":5,"endColumn":23},{"ruleId":"52","severity":1,"message":"57","line":6,"column":10,"nodeType":"54","messageId":"55","endLine":6,"endColumn":15},{"ruleId":"52","severity":1,"message":"58","line":11,"column":7,"nodeType":"54","messageId":"55","endLine":11,"endColumn":16},{"ruleId":"59","severity":1,"message":"60","line":25,"column":24,"nodeType":"61","messageId":"62","endLine":25,"endColumn":26},{"ruleId":"59","severity":1,"message":"60","line":34,"column":31,"nodeType":"61","messageId":"62","endLine":34,"endColumn":33},{"ruleId":"59","severity":1,"message":"60","line":38,"column":40,"nodeType":"61","messageId":"62","endLine":38,"endColumn":42},{"ruleId":"59","severity":1,"message":"60","line":55,"column":40,"nodeType":"61","messageId":"62","endLine":55,"endColumn":42},{"ruleId":"59","severity":1,"message":"60","line":77,"column":40,"nodeType":"61","messageId":"62","endLine":77,"endColumn":42},{"ruleId":"52","severity":1,"message":"63","line":18,"column":10,"nodeType":"54","messageId":"55","endLine":18,"endColumn":23},{"ruleId":"52","severity":1,"message":"64","line":18,"column":25,"nodeType":"54","messageId":"55","endLine":18,"endColumn":35},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"52","severity":1,"message":"69","line":1,"column":17,"nodeType":"54","messageId":"55","endLine":1,"endColumn":25},"@typescript-eslint/no-unused-vars","'PlantCycle' is defined but never used.","Identifier","unusedVar","'useAppContext' is defined but never used.","'State' is defined but never used.","'cycleData' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'setModalState' is assigned a value but never used.","'modalState' is assigned a value but never used.","no-native-reassign",["70"],"no-negated-in-lhs",["71"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]