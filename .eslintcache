[{"/Users/pavel.hincek/WebstormProjects/planter-manager/src/App.tsx":"1","/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/PlantCycle/index.tsx":"2","/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/PlantEvent/index.tsx":"3","/Users/pavel.hincek/WebstormProjects/planter-manager/src/index.tsx":"4","/Users/pavel.hincek/WebstormProjects/planter-manager/src/providers/context.tsx":"5","/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/Timeline/index.tsx":"6","/Users/pavel.hincek/WebstormProjects/planter-manager/src/providers/plantData.ts":"7","/Users/pavel.hincek/WebstormProjects/planter-manager/src/reportWebVitals.ts":"8","/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/ModalContent/index.tsx":"9","/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/ModalContent/SoakInformation.tsx":"10","/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/ModalContent/GeneralInformation.tsx":"11","/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/ModalContent/GermInformation.tsx":"12","/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/ModalContent/GrowInformation.tsx":"13","/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/ModalContent/DayInformation.tsx":"14","/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/Legend/index.tsx":"15","/Users/pavel.hincek/WebstormProjects/planter-manager/src/providers/liveContext.tsx":"16","/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/Live/index.tsx":"17","/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/LiveUnit/index.tsx":"18","/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/LiveUnitRow/index.tsx":"19","/Users/pavel.hincek/WebstormProjects/planter-manager/src/providers/interface.ts":"20"},{"size":504,"mtime":1611913428000,"results":"21","hashOfConfig":"22"},{"size":3147,"mtime":1610377092000,"results":"23","hashOfConfig":"22"},{"size":1341,"mtime":1610315429000,"results":"24","hashOfConfig":"22"},{"size":500,"mtime":1609362135000,"results":"25","hashOfConfig":"22"},{"size":1869,"mtime":1611176917000,"results":"26","hashOfConfig":"22"},{"size":4170,"mtime":1611252015000,"results":"27","hashOfConfig":"22"},{"size":4627,"mtime":1611242390000,"results":"28","hashOfConfig":"22"},{"size":425,"mtime":1609354663000,"results":"29","hashOfConfig":"22"},{"size":2445,"mtime":1611161978000,"results":"30","hashOfConfig":"22"},{"size":406,"mtime":1610310584000,"results":"31","hashOfConfig":"22"},{"size":925,"mtime":1611161612000,"results":"32","hashOfConfig":"22"},{"size":420,"mtime":1610310593000,"results":"33","hashOfConfig":"22"},{"size":909,"mtime":1610310656000,"results":"34","hashOfConfig":"22"},{"size":334,"mtime":1610311036000,"results":"35","hashOfConfig":"22"},{"size":1223,"mtime":1610387787000,"results":"36","hashOfConfig":"22"},{"size":3286,"mtime":1611924953000,"results":"37","hashOfConfig":"22"},{"size":2983,"mtime":1611927418000,"results":"38","hashOfConfig":"22"},{"size":873,"mtime":1611927200000,"results":"39","hashOfConfig":"22"},{"size":1385,"mtime":1611920272000,"results":"40","hashOfConfig":"22"},{"size":852,"mtime":1610210342000,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1gbuthj",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/pavel.hincek/WebstormProjects/planter-manager/src/App.tsx",["89","90"],"/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/PlantCycle/index.tsx",[],"/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/PlantEvent/index.tsx",[],["91","92"],"/Users/pavel.hincek/WebstormProjects/planter-manager/src/index.tsx",[],["93","94"],"/Users/pavel.hincek/WebstormProjects/planter-manager/src/providers/context.tsx",[],"/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/Timeline/index.tsx",[],"/Users/pavel.hincek/WebstormProjects/planter-manager/src/providers/plantData.ts",[],"/Users/pavel.hincek/WebstormProjects/planter-manager/src/reportWebVitals.ts",[],["95","96"],"/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/ModalContent/index.tsx",[],"/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/ModalContent/SoakInformation.tsx",[],["97","98"],"/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/ModalContent/GeneralInformation.tsx",[],"/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/ModalContent/GermInformation.tsx",[],"/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/ModalContent/GrowInformation.tsx",[],"/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/ModalContent/DayInformation.tsx",[],"/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/Legend/index.tsx",[],"/Users/pavel.hincek/WebstormProjects/planter-manager/src/providers/liveContext.tsx",["99","100"],"import React, { useContext, useReducer } from \"react\";\nimport moment from \"moment\";\nimport { plantData } from \"./plantData\";\n\nexport type LiveDate = {\n  plantingDate: string;\n  harvestDate: string;\n};\n\nexport type ModalSelection = {\n  id: string;\n  date: LiveDate;\n};\n\nexport type LiveUnitType = {\n  id: string;\n  date: LiveDate;\n  amount: number;\n};\n\nexport type State = {\n  trayContent: LiveUnitType[];\n  plantingDate: string;\n  modalSelection: ModalSelection;\n  modalState: boolean;\n  capacity: number;\n  total: number;\n};\n\nconst initialState: State = {\n  trayContent: [],\n  plantingDate: \"2021-01-01\",\n  modalSelection: {\n    id: \"\",\n    date: {\n      plantingDate: \"\",\n      harvestDate: \"\",\n    },\n  },\n  modalState: false,\n  capacity: 60,\n  total: 0,\n};\n\nconst Context = React.createContext([\n  initialState,\n  ({ type, payload }: any) => {\n    // do nohting.\n  },\n]);\n\nconst ACTIONS = {\n  PLANTING: \"PLANTING\",\n  REMOVE_PLANTING_ITEM: \"REMOVE_PLANTING_ITEM\",\n  CLEAR_PLANTING: \"CLEAR_PLANTING\",\n\n  SET_DATE: \"SET_DATE\",\n  CLEAR_TRAY: \"CLEAR_TRAY\",\n\n  SELECTED_MODAL_EVENT: \"SELECTED_MODAL_EVENT\",\n  SET_MODAL_STATE: \"SET_MODAL_STATE\",\n};\n\nexport const reducer = (state: State, { type, payload }: any) => {\n  switch (type) {\n    case \"PLANTING\":\n      const newItem: LiveUnitType = {\n        id: payload.id,\n        date: payload.date,\n        amount: payload.number,\n      };\n\n      const updated: LiveUnitType[] = state.trayContent.map((item) => {\n        if (item.id === payload.id) {\n          return newItem;\n        } else return item;\n      });\n\n      const isAlready = (element: LiveUnitType) => element.id === payload.id;\n\n      const final = {\n        ...state,\n        trayContent: state.trayContent.some(isAlready)\n          ? updated\n          : [...state.trayContent, newItem],\n      };\n\n      let calculatedTotal: number = 0;\n      final.trayContent.map(\n        (item) => (calculatedTotal = calculatedTotal + item.amount)\n      );\n      return { ...final, total: calculatedTotal };\n\n    case \"CLEAR_PLANTING\":\n      const cleared = {\n        ...state,\n        total: 0,\n      };\n\n      return { ...cleared, trayContent: payload };\n\n    case \"REMOVE_PLANTING_ITEM\":\n      let withoutRemoved: any = state.trayContent.filter(\n        (item) => item.id !== payload\n      );\n      let itemToRemove: any = state.trayContent.filter(item => item.id === payload)\n\n      let updatedTotal = state.total - itemToRemove[0].amount;\n      let tempState = { ...state, total: updatedTotal };\n      return { ...tempState , trayContent: withoutRemoved };\n\n    case \"SET_DATE\":\n      return { ...state, plantingDate: payload };\n\n    case \"CLEAR_TRAY\":\n      return { ...state, trayContent: payload };\n\n    case \"SELECTED_MODAL_EVENT\":\n      return { ...state, modalSelection: payload };\n\n    case \"SET_MODAL_STATE\":\n      return { ...state, modalState: payload };\n\n    default:\n      return state;\n  }\n};\n\nexport const LiveContextProvider = (props: any) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <Context.Provider value={[state, dispatch]}>\n      {props.children}\n    </Context.Provider>\n  );\n};\n\nexport const useLiveContext = () => {\n  const [state, dispatch] = useContext(Context);\n\n  return {\n    state,\n    dispatch,\n    ACTIONS,\n  };\n};\n","/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/Live/index.tsx",["101"],"import React, { useState } from \"react\";\nimport Select from \"react-select\";\nimport EcoIcon from \"@material-ui/icons/Eco\";\nimport LiveUnit from \"../LiveUnit\";\nimport LiveUnitRow from \"../LiveUnitRow\";\nimport { options, nameMap } from \"../../providers/plantData\";\nimport { useLiveContext, LiveUnitType } from \"../../providers/liveContext\";\n\nconst Live = () => {\n  const [selected, setSelected] = useState<string[]>([]);\n  const [date, setDate] = useState(\"2021-01-01\");\n  const { state, dispatch, ACTIONS }: any = useLiveContext();\n\n  const submitSelection = () => {\n    console.log(\"submit\");\n  };\n\n  const onDateChange = (e: any) => {\n    setDate(e.target.value);\n\n    dispatch({\n      type: ACTIONS.SET_DATE,\n      payload: e.target.value,\n    });\n  };\n\n  const onPlantChangeHandler = (selection: any, action: any) => {\n    if (action.action === \"remove-value\") {\n      dispatch({\n        type: ACTIONS.REMOVE_PLANTING_ITEM,\n        payload: action.removedValue.value,\n      });\n    }\n    if (action.action === \"clear\") {\n      dispatch({\n        type: ACTIONS.CLEAR_PLANTING,\n        payload: [],\n      });\n    }\n    let sel = selection?.map((item: any) => item.value);\n    setSelected(sel);\n  };\n\n  let liveCollection: any = [];\n\n  state.trayContent.map((unit: LiveUnitType, index: number) =>\n    new Array(unit.amount).fill(1).map((plantUnit, index) => {\n      liveCollection.push(\n        <LiveUnit key={index} id={unit.id} plantName={nameMap[unit.id]} date={unit.date.harvestDate} />\n      );\n    })\n  );\n\n  let isFull: any = state.capacity <= state.total ? { color: \"darkRed\" } : {};\n\n  return (\n    <div className=\"liveContainer\">\n      <div className=\"liveFormWrapper\">\n        <h3>Plant Selection</h3>\n        <div className=\"liveControl\">\n          <div className=\"liveControlItem\">\n            <label>\n              Planting Date:\n              <input\n                onChange={(e) => {\n                  onDateChange(e);\n                }}\n                type=\"date\"\n                value={date}\n              />\n            </label>\n          </div>\n          <div className=\"liveControlItem\">\n            <Select\n              onChange={(selection: any, action: any) =>\n                onPlantChangeHandler(selection, action)\n              }\n              isMulti\n              options={options}\n            />\n          </div>\n        </div>\n        {selected?.map((item, index) => (\n          <LiveUnitRow key={index} id={item} date={date} />\n        ))}\n        <div className=\"limits\">\n          <span style={isFull}>Capacity: {state.capacity}</span>\n          <span style={isFull}>Total: {state.total}</span>\n          <span>Remaining: {state.capacity - state.total}</span>\n        </div>\n        <div className=\"submitSelection\">\n          <button onClick={submitSelection}>\n            <EcoIcon /> Plant selected\n          </button>\n        </div>\n      </div>\n      <div className=\"liveWrapper\">{liveCollection}</div>\n    </div>\n  );\n};\n\nexport default Live;\n","/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/LiveUnit/index.tsx",["102","103","104"],"/Users/pavel.hincek/WebstormProjects/planter-manager/src/components/LiveUnitRow/index.tsx",["105","106","107","108","109"],"import React, { useEffect, useState } from \"react\";\nimport { plantData, nameMap } from \"../../providers/plantData\";\nimport { PlantData } from \"../../providers/interface\";\n// import DayIcon from \"@material-ui/icons/Today\";\nimport moment from \"moment\";\nimport { useLiveContext, LiveUnitType } from \"../../providers/liveContext\";\n\ninterface LiveUnitRowProps {\n  date: string;\n  id: string;\n}\n\nconst LiveUnitRow = ({ id, date }: LiveUnitRowProps) => {\n  const { dispatch, ACTIONS }: any = useLiveContext();\n\n  const calculateDates = (dateString: string, days: number) => {\n    let d = moment(new Date(dateString));\n    let dm = d.add(days, \"days\");\n    return dm.format(\"dd DD. MM.\");\n  };\n\n  let growDays: number = 0;\n\n  plantData.map((item) => {\n    if (item.id === id) {\n      growDays = item.cycleData.grow.length;\n    }\n  });\n\n  const updateSelection = (e: any) => {\n    dispatch({\n      type: ACTIONS.PLANTING,\n      payload: {\n        id: id,\n        number: parseInt(e.target.value, 10),\n        date: {\n          plantingDate: calculateDates(date, 0), // just to format\n          harvestDate: calculateDates(date, growDays),\n        },\n      },\n    });\n  };\n\n  return (\n    <div className=\"plantRow\">\n      <label htmlFor={id}>{nameMap[id]}</label>\n      <input min={1} id={id} onChange={(e) => updateSelection(e)} type=\"number\" />\n    </div>\n  );\n};\n\nexport default LiveUnitRow;\n","/Users/pavel.hincek/WebstormProjects/planter-manager/src/providers/interface.ts",[],{"ruleId":"110","severity":1,"message":"111","line":3,"column":8,"nodeType":"112","messageId":"113","endLine":3,"endColumn":16},{"ruleId":"110","severity":1,"message":"114","line":4,"column":10,"nodeType":"112","messageId":"113","endLine":4,"endColumn":28},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"115","replacedBy":"119"},{"ruleId":"117","replacedBy":"120"},{"ruleId":"115","replacedBy":"121"},{"ruleId":"117","replacedBy":"122"},{"ruleId":"115","replacedBy":"123"},{"ruleId":"117","replacedBy":"124"},{"ruleId":"110","severity":1,"message":"125","line":2,"column":8,"nodeType":"112","messageId":"113","endLine":2,"endColumn":14},{"ruleId":"110","severity":1,"message":"126","line":3,"column":10,"nodeType":"112","messageId":"113","endLine":3,"endColumn":19},{"ruleId":"127","severity":1,"message":"128","line":47,"column":59,"nodeType":"129","messageId":"130","endLine":47,"endColumn":61},{"ruleId":"110","severity":1,"message":"131","line":2,"column":8,"nodeType":"112","messageId":"113","endLine":2,"endColumn":17},{"ruleId":"110","severity":1,"message":"125","line":5,"column":8,"nodeType":"112","messageId":"113","endLine":5,"endColumn":14},{"ruleId":"110","severity":1,"message":"132","line":16,"column":9,"nodeType":"112","messageId":"113","endLine":16,"endColumn":23},{"ruleId":"110","severity":1,"message":"133","line":1,"column":17,"nodeType":"112","messageId":"113","endLine":1,"endColumn":26},{"ruleId":"110","severity":1,"message":"134","line":1,"column":28,"nodeType":"112","messageId":"113","endLine":1,"endColumn":36},{"ruleId":"110","severity":1,"message":"135","line":3,"column":10,"nodeType":"112","messageId":"113","endLine":3,"endColumn":19},{"ruleId":"110","severity":1,"message":"136","line":6,"column":26,"nodeType":"112","messageId":"113","endLine":6,"endColumn":38},{"ruleId":"127","severity":1,"message":"128","line":24,"column":24,"nodeType":"129","messageId":"130","endLine":24,"endColumn":26},"@typescript-eslint/no-unused-vars","'Timeline' is defined but never used.","Identifier","unusedVar","'AppContextProvider' is defined but never used.","no-native-reassign",["137"],"no-negated-in-lhs",["138"],["137"],["138"],["137"],["138"],["137"],["138"],"'moment' is defined but never used.","'plantData' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'TodayIcon' is defined but never used.","'getMoreOnEvent' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'PlantData' is defined but never used.","'LiveUnitType' is defined but never used.","no-global-assign","no-unsafe-negation"]